var baseUrl = window.location.pathname;
		var fileIndex = baseUrl.indexOf("index.html");
		if (fileIndex > 0)
			baseUrl = baseUrl.slice(0, fileIndex);
		require.config({
			baseUrl: baseUrl,
			paths: {
				"jquery": "webjars/jquery/3.6.0/jquery.min",
				"ace/ext/language_tools": "webjars/ace/1.3.3/src/ext-language_tools",
				"xtext/xtext-ace": "xtext/2.37.0/xtext-ace"
			}
		});
		require(["webjars/ace/1.3.3/src/ace"], function() {
			require(["xtext/xtext-ace"], function(xtext) {
				var editor = xtext.createEditor({
					baseUrl: baseUrl,
					syntaxDefinition: "xtext-resources/generated/mode-spec"
				});
				
				$("#save-button").click(function() {
					
					var content = editor.xtextServices.generate().then(function(result) {
						fetch('http://127.0.0.1:5000/generate', {
							method: 'POST',
							headers: {
								'Content-Type': 'text/plain'
							},
							body: result
						})
						.then(response => response.text())
						.then(data => console.log("Response from server:", data))
						.catch(error => console.error("Error:", error));
					});
				})
			});
		});
		
		const eventSource = new EventSource('http://127.0.0.1:5000/stream');
		eventSource.onmessage = function(event) {
			console.log("Received from stream: ", event.data);
			var data = JSON.parse(event.data);
			addPoint(data.spec, data.result[0][0], data.result[0][1])
		};
class PlotRenderer extends React.Component {

			      constructor(props) {
			        super(props);
			        this.state = {
			          times: props.times || [],
			          values: props.values || [],
			        }
			      }
			      

			      render() {
			        const style = {
			          width: "calc(30vw - 50px)",
			          height: "calc(30vh - 50px)",
			          margin: "20px",
			        };

			        const lineLayer = {
			          type: "line",
			          x: "_time",
			          y: "_value"
			        };

			        const table = Giraffe.newTable(this.state.times.length)
			          .addColumn('_time', 'dateTime:RFC3339', 'time', this.state.times)
			          .addColumn('_value', 'double', 'number', this.state.values);

			        const config = {
			          table,
			          layers: [lineLayer]
			        };

			        const SimplePlot = React.createElement(Giraffe.Plot, {config}, null);
			        return React.createElement('div', {style}, SimplePlot);
			      }
			    }

			    var data = {}
				
			    function addPoint(spec, timestamp, robustness){
			      if (!data[spec]) {
					data[spec] = {
						timestamps: [],
						values: []
					}
					updateNavbarWithSpecs();
				  }
				  
				  data[spec].timestamps.push(timestamp)
				  data[spec].values.push(robustness)
				  
				  
				  let e = document.getElementById(spec);
				  
				  if (!e) {
					e = document.createElement('div');
					e.style.boxShadow = "inset 0 0 0 4px grey";
					e.style.padding = "20px";
					e.style.backgroundColor = "#f5f5f5";
					e.id = spec;
					
					const container = document.getElementById('dashboards-view');
					if (container) {
						container.appendChild(e);
					}
				  }
				  			  
			      ReactDOM.render(
			        React.createElement(PlotRenderer, {times: data[spec].timestamps, values: data[spec].values}),
			          e
			        );
			    }
				
				function updateNavbarWithSpecs() {
				  const navbar = document.getElementById("spec-navbar");
				  navbar.innerHTML = ''; // clear previous items

				  for (const spec in data) {
				    const li = document.createElement("li");
				    li.className = "nav-item";

				    const a = document.createElement("a");
				    a.className = "nav-link";
				    a.href = "#";
				    a.textContent = spec;

				    // Optional: add click behavior (e.g., scroll to the chart)
				    a.onclick = () => {
				      const target = document.getElementById(spec);
				      if (target) {
				        target.scrollIntoView({ behavior: 'smooth' });
				      }
				    };

				    li.appendChild(a);
				    navbar.appendChild(li);
				  }
				}