/*
 * generated by Xtext 2.37.0
 */
grammar InternalSpec;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.stlrobust.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.stlrobust.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.stlrobust.services.SpecGrammarAccess;

}
@parser::members {
	private SpecGrammarAccess grammarAccess;

	public void setGrammarAccess(SpecGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getGroup()); }
		(rule__Model__Group__0)
		{ after(grammarAccess.getModelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSignal
entryRuleSignal
:
{ before(grammarAccess.getSignalRule()); }
	 ruleSignal
{ after(grammarAccess.getSignalRule()); } 
	 EOF 
;

// Rule Signal
ruleSignal 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSignalAccess().getGroup()); }
		(rule__Signal__Group__0)
		{ after(grammarAccess.getSignalAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSpecification
entryRuleSpecification
:
{ before(grammarAccess.getSpecificationRule()); }
	 ruleSpecification
{ after(grammarAccess.getSpecificationRule()); } 
	 EOF 
;

// Rule Specification
ruleSpecification 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSpecificationAccess().getGroup()); }
		(rule__Specification__Group__0)
		{ after(grammarAccess.getSpecificationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleScope
entryRuleScope
:
{ before(grammarAccess.getScopeRule()); }
	 ruleScope
{ after(grammarAccess.getScopeRule()); } 
	 EOF 
;

// Rule Scope
ruleScope 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getScopeAccess().getAlternatives()); }
		(rule__Scope__Alternatives)
		{ after(grammarAccess.getScopeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePattern
entryRulePattern
:
{ before(grammarAccess.getPatternRule()); }
	 rulePattern
{ after(grammarAccess.getPatternRule()); } 
	 EOF 
;

// Rule Pattern
rulePattern 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPatternAccess().getAlternatives()); }
		(rule__Pattern__Alternatives)
		{ after(grammarAccess.getPatternAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUniversality
entryRuleUniversality
:
{ before(grammarAccess.getUniversalityRule()); }
	 ruleUniversality
{ after(grammarAccess.getUniversalityRule()); } 
	 EOF 
;

// Rule Universality
ruleUniversality 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUniversalityAccess().getGroup()); }
		(rule__Universality__Group__0)
		{ after(grammarAccess.getUniversalityAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAbsence
entryRuleAbsence
:
{ before(grammarAccess.getAbsenceRule()); }
	 ruleAbsence
{ after(grammarAccess.getAbsenceRule()); } 
	 EOF 
;

// Rule Absence
ruleAbsence 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAbsenceAccess().getGroup()); }
		(rule__Absence__Group__0)
		{ after(grammarAccess.getAbsenceAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExistence
entryRuleExistence
:
{ before(grammarAccess.getExistenceRule()); }
	 ruleExistence
{ after(grammarAccess.getExistenceRule()); } 
	 EOF 
;

// Rule Existence
ruleExistence 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExistenceAccess().getGroup()); }
		(rule__Existence__Group__0)
		{ after(grammarAccess.getExistenceAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMinimumDuration
entryRuleMinimumDuration
:
{ before(grammarAccess.getMinimumDurationRule()); }
	 ruleMinimumDuration
{ after(grammarAccess.getMinimumDurationRule()); } 
	 EOF 
;

// Rule MinimumDuration
ruleMinimumDuration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMinimumDurationAccess().getAKeyword()); }
		'a'
		{ after(grammarAccess.getMinimumDurationAccess().getAKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMaximumDuration
entryRuleMaximumDuration
:
{ before(grammarAccess.getMaximumDurationRule()); }
	 ruleMaximumDuration
{ after(grammarAccess.getMaximumDurationRule()); } 
	 EOF 
;

// Rule MaximumDuration
ruleMaximumDuration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMaximumDurationAccess().getAKeyword()); }
		'a'
		{ after(grammarAccess.getMaximumDurationAccess().getAKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRecurrence
entryRuleRecurrence
:
{ before(grammarAccess.getRecurrenceRule()); }
	 ruleRecurrence
{ after(grammarAccess.getRecurrenceRule()); } 
	 EOF 
;

// Rule Recurrence
ruleRecurrence 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRecurrenceAccess().getAKeyword()); }
		'a'
		{ after(grammarAccess.getRecurrenceAccess().getAKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrecedence
entryRulePrecedence
:
{ before(grammarAccess.getPrecedenceRule()); }
	 rulePrecedence
{ after(grammarAccess.getPrecedenceRule()); } 
	 EOF 
;

// Rule Precedence
rulePrecedence 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrecedenceAccess().getAKeyword()); }
		'a'
		{ after(grammarAccess.getPrecedenceAccess().getAKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUntil
entryRuleUntil
:
{ before(grammarAccess.getUntilRule()); }
	 ruleUntil
{ after(grammarAccess.getUntilRule()); } 
	 EOF 
;

// Rule Until
ruleUntil 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUntilAccess().getAKeyword()); }
		'a'
		{ after(grammarAccess.getUntilAccess().getAKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleResponse
entryRuleResponse
:
{ before(grammarAccess.getResponseRule()); }
	 ruleResponse
{ after(grammarAccess.getResponseRule()); } 
	 EOF 
;

// Rule Response
ruleResponse 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getResponseAccess().getGroup()); }
		(rule__Response__Group__0)
		{ after(grammarAccess.getResponseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleResponseInvariance
entryRuleResponseInvariance
:
{ before(grammarAccess.getResponseInvarianceRule()); }
	 ruleResponseInvariance
{ after(grammarAccess.getResponseInvarianceRule()); } 
	 EOF 
;

// Rule ResponseInvariance
ruleResponseInvariance 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getResponseInvarianceAccess().getAKeyword()); }
		'a'
		{ after(grammarAccess.getResponseInvarianceAccess().getAKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNumber
entryRuleNumber
:
{ before(grammarAccess.getNumberRule()); }
	 ruleNumber
{ after(grammarAccess.getNumberRule()); } 
	 EOF 
;

// Rule Number
ruleNumber 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNumberAccess().getGroup()); }
		(rule__Number__Group__0)
		{ after(grammarAccess.getNumberAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression
entryRuleExpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getGroup()); }
		(rule__Expression__Group__0)
		{ after(grammarAccess.getExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTime
entryRuleTime
:
{ before(grammarAccess.getTimeRule()); }
	 ruleTime
{ after(grammarAccess.getTimeRule()); } 
	 EOF 
;

// Rule Time
ruleTime 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTimeAccess().getAlternatives()); }
		(rule__Time__Alternatives)
		{ after(grammarAccess.getTimeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUpperTimeBound
entryRuleUpperTimeBound
:
{ before(grammarAccess.getUpperTimeBoundRule()); }
	 ruleUpperTimeBound
{ after(grammarAccess.getUpperTimeBoundRule()); } 
	 EOF 
;

// Rule UpperTimeBound
ruleUpperTimeBound 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUpperTimeBoundAccess().getGroup()); }
		(rule__UpperTimeBound__Group__0)
		{ after(grammarAccess.getUpperTimeBoundAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLowerTimeBound
entryRuleLowerTimeBound
:
{ before(grammarAccess.getLowerTimeBoundRule()); }
	 ruleLowerTimeBound
{ after(grammarAccess.getLowerTimeBoundRule()); } 
	 EOF 
;

// Rule LowerTimeBound
ruleLowerTimeBound 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLowerTimeBoundAccess().getGroup()); }
		(rule__LowerTimeBound__Group__0)
		{ after(grammarAccess.getLowerTimeBoundAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInterval
entryRuleInterval
:
{ before(grammarAccess.getIntervalRule()); }
	 ruleInterval
{ after(grammarAccess.getIntervalRule()); } 
	 EOF 
;

// Rule Interval
ruleInterval 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIntervalAccess().getGroup()); }
		(rule__Interval__Group__0)
		{ after(grammarAccess.getIntervalAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTimeUnit
entryRuleTimeUnit
:
{ before(grammarAccess.getTimeUnitRule()); }
	 ruleTimeUnit
{ after(grammarAccess.getTimeUnitRule()); } 
	 EOF 
;

// Rule TimeUnit
ruleTimeUnit 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTimeUnitAccess().getAlternatives()); }
		(rule__TimeUnit__Alternatives)
		{ after(grammarAccess.getTimeUnitAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Scope__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getScopeAccess().getGroup_0()); }
		(rule__Scope__Group_0__0)
		{ after(grammarAccess.getScopeAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getScopeAccess().getGroup_1()); }
		(rule__Scope__Group_1__0)
		{ after(grammarAccess.getScopeAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getScopeAccess().getGroup_2()); }
		(rule__Scope__Group_2__0)
		{ after(grammarAccess.getScopeAccess().getGroup_2()); }
	)
	|
	(
		{ before(grammarAccess.getScopeAccess().getGroup_3()); }
		(rule__Scope__Group_3__0)
		{ after(grammarAccess.getScopeAccess().getGroup_3()); }
	)
	|
	(
		{ before(grammarAccess.getScopeAccess().getGroup_4()); }
		(rule__Scope__Group_4__0)
		{ after(grammarAccess.getScopeAccess().getGroup_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatternAccess().getGroup_0()); }
		(rule__Pattern__Group_0__0)
		{ after(grammarAccess.getPatternAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getPatternAccess().getGroup_1()); }
		(rule__Pattern__Group_1__0)
		{ after(grammarAccess.getPatternAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getPatternAccess().getGroup_2()); }
		(rule__Pattern__Group_2__0)
		{ after(grammarAccess.getPatternAccess().getGroup_2()); }
	)
	|
	(
		{ before(grammarAccess.getPatternAccess().getGroup_3()); }
		(rule__Pattern__Group_3__0)
		{ after(grammarAccess.getPatternAccess().getGroup_3()); }
	)
	|
	(
		{ before(grammarAccess.getPatternAccess().getGroup_4()); }
		(rule__Pattern__Group_4__0)
		{ after(grammarAccess.getPatternAccess().getGroup_4()); }
	)
	|
	(
		{ before(grammarAccess.getPatternAccess().getGroup_5()); }
		(rule__Pattern__Group_5__0)
		{ after(grammarAccess.getPatternAccess().getGroup_5()); }
	)
	|
	(
		{ before(grammarAccess.getPatternAccess().getGroup_6()); }
		(rule__Pattern__Group_6__0)
		{ after(grammarAccess.getPatternAccess().getGroup_6()); }
	)
	|
	(
		{ before(grammarAccess.getPatternAccess().getGroup_7()); }
		(rule__Pattern__Group_7__0)
		{ after(grammarAccess.getPatternAccess().getGroup_7()); }
	)
	|
	(
		{ before(grammarAccess.getPatternAccess().getGroup_8()); }
		(rule__Pattern__Group_8__0)
		{ after(grammarAccess.getPatternAccess().getGroup_8()); }
	)
	|
	(
		{ before(grammarAccess.getPatternAccess().getGroup_9()); }
		(rule__Pattern__Group_9__0)
		{ after(grammarAccess.getPatternAccess().getGroup_9()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getS1Assignment_0_0()); }
		(rule__Expression__S1Assignment_0_0)
		{ after(grammarAccess.getExpressionAccess().getS1Assignment_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getF1Assignment_0_1()); }
		(rule__Expression__F1Assignment_0_1)
		{ after(grammarAccess.getExpressionAccess().getF1Assignment_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__OperatorAlternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getOperatorGreaterThanSignKeyword_1_0_0()); }
		'>'
		{ after(grammarAccess.getExpressionAccess().getOperatorGreaterThanSignKeyword_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getOperatorGreaterThanSignEqualsSignKeyword_1_0_1()); }
		'>='
		{ after(grammarAccess.getExpressionAccess().getOperatorGreaterThanSignEqualsSignKeyword_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getOperatorEqualsSignKeyword_1_0_2()); }
		'='
		{ after(grammarAccess.getExpressionAccess().getOperatorEqualsSignKeyword_1_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getOperatorLessThanSignKeyword_1_0_3()); }
		'<'
		{ after(grammarAccess.getExpressionAccess().getOperatorLessThanSignKeyword_1_0_3()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getOperatorLessThanSignEqualsSignKeyword_1_0_4()); }
		'<='
		{ after(grammarAccess.getExpressionAccess().getOperatorLessThanSignEqualsSignKeyword_1_0_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Alternatives_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getS2Assignment_2_0()); }
		(rule__Expression__S2Assignment_2_0)
		{ after(grammarAccess.getExpressionAccess().getS2Assignment_2_0()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getF2Assignment_2_1()); }
		(rule__Expression__F2Assignment_2_1)
		{ after(grammarAccess.getExpressionAccess().getF2Assignment_2_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Time__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTimeAccess().getUpperTimeBoundParserRuleCall_0()); }
		ruleUpperTimeBound
		{ after(grammarAccess.getTimeAccess().getUpperTimeBoundParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getTimeAccess().getLowerTimeBoundParserRuleCall_1()); }
		ruleLowerTimeBound
		{ after(grammarAccess.getTimeAccess().getLowerTimeBoundParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getTimeAccess().getIntervalParserRuleCall_2()); }
		ruleInterval
		{ after(grammarAccess.getTimeAccess().getIntervalParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TimeUnit__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTimeUnitAccess().getMsKeyword_0()); }
		'ms'
		{ after(grammarAccess.getTimeUnitAccess().getMsKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getTimeUnitAccess().getSKeyword_1()); }
		's'
		{ after(grammarAccess.getTimeUnitAccess().getSKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getTimeUnitAccess().getMinKeyword_2()); }
		'min'
		{ after(grammarAccess.getTimeUnitAccess().getMinKeyword_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getSignalsAssignment_0()); }
	(rule__Model__SignalsAssignment_0)*
	{ after(grammarAccess.getModelAccess().getSignalsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getSpecificationsAssignment_1()); }
	(rule__Model__SpecificationsAssignment_1)*
	{ after(grammarAccess.getModelAccess().getSpecificationsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Signal__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Signal__Group__0__Impl
	rule__Signal__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSignalAccess().getSignalKeyword_0()); }
	'signal'
	{ after(grammarAccess.getSignalAccess().getSignalKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Signal__Group__1__Impl
	rule__Signal__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSignalAccess().getNameAssignment_1()); }
	(rule__Signal__NameAssignment_1)
	{ after(grammarAccess.getSignalAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Signal__Group__2__Impl
	rule__Signal__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSignalAccess().getFromKeyword_2()); }
	'from'
	{ after(grammarAccess.getSignalAccess().getFromKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Signal__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSignalAccess().getQueueNameAssignment_3()); }
	(rule__Signal__QueueNameAssignment_3)
	{ after(grammarAccess.getSignalAccess().getQueueNameAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Specification__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Specification__Group__0__Impl
	rule__Specification__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Specification__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSpecificationAccess().getSpecificationKeyword_0()); }
	'specification'
	{ after(grammarAccess.getSpecificationAccess().getSpecificationKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Specification__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Specification__Group__1__Impl
	rule__Specification__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Specification__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSpecificationAccess().getNameAssignment_1()); }
	(rule__Specification__NameAssignment_1)
	{ after(grammarAccess.getSpecificationAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Specification__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Specification__Group__2__Impl
	rule__Specification__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Specification__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSpecificationAccess().getColonKeyword_2()); }
	':'
	{ after(grammarAccess.getSpecificationAccess().getColonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Specification__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Specification__Group__3__Impl
	rule__Specification__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Specification__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSpecificationAccess().getScopeKeyword_3()); }
	'scope'
	{ after(grammarAccess.getSpecificationAccess().getScopeKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Specification__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Specification__Group__4__Impl
	rule__Specification__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Specification__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSpecificationAccess().getScopeAssignment_4()); }
	(rule__Specification__ScopeAssignment_4)
	{ after(grammarAccess.getSpecificationAccess().getScopeAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Specification__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Specification__Group__5__Impl
	rule__Specification__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Specification__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSpecificationAccess().getPatternKeyword_5()); }
	'pattern'
	{ after(grammarAccess.getSpecificationAccess().getPatternKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Specification__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Specification__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Specification__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSpecificationAccess().getPatternAssignment_6()); }
	(rule__Specification__PatternAssignment_6)
	{ after(grammarAccess.getSpecificationAccess().getPatternAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Scope__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Scope__Group_0__0__Impl
	rule__Scope__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Scope__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScopeAccess().getGlobalScopeAction_0_0()); }
	()
	{ after(grammarAccess.getScopeAccess().getGlobalScopeAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Scope__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Scope__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Scope__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScopeAccess().getGloballyKeyword_0_1()); }
	'Globally'
	{ after(grammarAccess.getScopeAccess().getGloballyKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Scope__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Scope__Group_1__0__Impl
	rule__Scope__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Scope__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScopeAccess().getBeforeScopeAction_1_0()); }
	()
	{ after(grammarAccess.getScopeAccess().getBeforeScopeAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Scope__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Scope__Group_1__1__Impl
	rule__Scope__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Scope__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScopeAccess().getBeforeKeyword_1_1()); }
	'Before'
	{ after(grammarAccess.getScopeAccess().getBeforeKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Scope__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Scope__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Scope__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScopeAccess().getRAssignment_1_2()); }
	(rule__Scope__RAssignment_1_2)
	{ after(grammarAccess.getScopeAccess().getRAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Scope__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Scope__Group_2__0__Impl
	rule__Scope__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Scope__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScopeAccess().getAfterScopeAction_2_0()); }
	()
	{ after(grammarAccess.getScopeAccess().getAfterScopeAction_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Scope__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Scope__Group_2__1__Impl
	rule__Scope__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Scope__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScopeAccess().getAfterKeyword_2_1()); }
	'After'
	{ after(grammarAccess.getScopeAccess().getAfterKeyword_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Scope__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Scope__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Scope__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScopeAccess().getQAssignment_2_2()); }
	(rule__Scope__QAssignment_2_2)
	{ after(grammarAccess.getScopeAccess().getQAssignment_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Scope__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Scope__Group_3__0__Impl
	rule__Scope__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Scope__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScopeAccess().getBetweenScopeAction_3_0()); }
	()
	{ after(grammarAccess.getScopeAccess().getBetweenScopeAction_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Scope__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Scope__Group_3__1__Impl
	rule__Scope__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Scope__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScopeAccess().getBetweenKeyword_3_1()); }
	'Between'
	{ after(grammarAccess.getScopeAccess().getBetweenKeyword_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Scope__Group_3__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Scope__Group_3__2__Impl
	rule__Scope__Group_3__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Scope__Group_3__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScopeAccess().getQAssignment_3_2()); }
	(rule__Scope__QAssignment_3_2)
	{ after(grammarAccess.getScopeAccess().getQAssignment_3_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Scope__Group_3__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Scope__Group_3__3__Impl
	rule__Scope__Group_3__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Scope__Group_3__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScopeAccess().getAndKeyword_3_3()); }
	'and'
	{ after(grammarAccess.getScopeAccess().getAndKeyword_3_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Scope__Group_3__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Scope__Group_3__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Scope__Group_3__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScopeAccess().getRAssignment_3_4()); }
	(rule__Scope__RAssignment_3_4)
	{ after(grammarAccess.getScopeAccess().getRAssignment_3_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Scope__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Scope__Group_4__0__Impl
	rule__Scope__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Scope__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScopeAccess().getAfterUntilScopeAction_4_0()); }
	()
	{ after(grammarAccess.getScopeAccess().getAfterUntilScopeAction_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Scope__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Scope__Group_4__1__Impl
	rule__Scope__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Scope__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScopeAccess().getAfterKeyword_4_1()); }
	'After'
	{ after(grammarAccess.getScopeAccess().getAfterKeyword_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Scope__Group_4__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Scope__Group_4__2__Impl
	rule__Scope__Group_4__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Scope__Group_4__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScopeAccess().getQAssignment_4_2()); }
	(rule__Scope__QAssignment_4_2)
	{ after(grammarAccess.getScopeAccess().getQAssignment_4_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Scope__Group_4__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Scope__Group_4__3__Impl
	rule__Scope__Group_4__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Scope__Group_4__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScopeAccess().getUntilKeyword_4_3()); }
	'until'
	{ after(grammarAccess.getScopeAccess().getUntilKeyword_4_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Scope__Group_4__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Scope__Group_4__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Scope__Group_4__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScopeAccess().getRAssignment_4_4()); }
	(rule__Scope__RAssignment_4_4)
	{ after(grammarAccess.getScopeAccess().getRAssignment_4_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Pattern__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pattern__Group_0__0__Impl
	rule__Pattern__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternAccess().getUniversalityKeyword_0_0()); }
	'Universality:'
	{ after(grammarAccess.getPatternAccess().getUniversalityKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pattern__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternAccess().getUniversalityParserRuleCall_0_1()); }
	ruleUniversality
	{ after(grammarAccess.getPatternAccess().getUniversalityParserRuleCall_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Pattern__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pattern__Group_1__0__Impl
	rule__Pattern__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternAccess().getAbsenceKeyword_1_0()); }
	'Absence:'
	{ after(grammarAccess.getPatternAccess().getAbsenceKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pattern__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternAccess().getAbsenceParserRuleCall_1_1()); }
	ruleAbsence
	{ after(grammarAccess.getPatternAccess().getAbsenceParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Pattern__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pattern__Group_2__0__Impl
	rule__Pattern__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternAccess().getExistenceKeyword_2_0()); }
	'Existence:'
	{ after(grammarAccess.getPatternAccess().getExistenceKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pattern__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternAccess().getExistenceParserRuleCall_2_1()); }
	ruleExistence
	{ after(grammarAccess.getPatternAccess().getExistenceParserRuleCall_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Pattern__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pattern__Group_3__0__Impl
	rule__Pattern__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternAccess().getMinimumDurationKeyword_3_0()); }
	'MinimumDuration:'
	{ after(grammarAccess.getPatternAccess().getMinimumDurationKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pattern__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternAccess().getMinimumDurationParserRuleCall_3_1()); }
	ruleMinimumDuration
	{ after(grammarAccess.getPatternAccess().getMinimumDurationParserRuleCall_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Pattern__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pattern__Group_4__0__Impl
	rule__Pattern__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternAccess().getMaximumDurationKeyword_4_0()); }
	'MaximumDuration:'
	{ after(grammarAccess.getPatternAccess().getMaximumDurationKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pattern__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternAccess().getMaximumDurationParserRuleCall_4_1()); }
	ruleMaximumDuration
	{ after(grammarAccess.getPatternAccess().getMaximumDurationParserRuleCall_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Pattern__Group_5__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pattern__Group_5__0__Impl
	rule__Pattern__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group_5__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternAccess().getRecurrenceKeyword_5_0()); }
	'Recurrence:'
	{ after(grammarAccess.getPatternAccess().getRecurrenceKeyword_5_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group_5__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pattern__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group_5__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternAccess().getRecurrenceParserRuleCall_5_1()); }
	ruleRecurrence
	{ after(grammarAccess.getPatternAccess().getRecurrenceParserRuleCall_5_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Pattern__Group_6__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pattern__Group_6__0__Impl
	rule__Pattern__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group_6__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternAccess().getPrecedenceKeyword_6_0()); }
	'Precedence:'
	{ after(grammarAccess.getPatternAccess().getPrecedenceKeyword_6_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group_6__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pattern__Group_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group_6__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternAccess().getPrecedenceParserRuleCall_6_1()); }
	rulePrecedence
	{ after(grammarAccess.getPatternAccess().getPrecedenceParserRuleCall_6_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Pattern__Group_7__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pattern__Group_7__0__Impl
	rule__Pattern__Group_7__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group_7__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternAccess().getUntilKeyword_7_0()); }
	'Until:'
	{ after(grammarAccess.getPatternAccess().getUntilKeyword_7_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group_7__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pattern__Group_7__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group_7__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternAccess().getUntilParserRuleCall_7_1()); }
	ruleUntil
	{ after(grammarAccess.getPatternAccess().getUntilParserRuleCall_7_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Pattern__Group_8__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pattern__Group_8__0__Impl
	rule__Pattern__Group_8__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group_8__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternAccess().getResponseKeyword_8_0()); }
	'Response:'
	{ after(grammarAccess.getPatternAccess().getResponseKeyword_8_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group_8__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pattern__Group_8__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group_8__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternAccess().getResponseParserRuleCall_8_1()); }
	ruleResponse
	{ after(grammarAccess.getPatternAccess().getResponseParserRuleCall_8_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Pattern__Group_9__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pattern__Group_9__0__Impl
	rule__Pattern__Group_9__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group_9__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternAccess().getResponseInvarianceKeyword_9_0()); }
	'ResponseInvariance:'
	{ after(grammarAccess.getPatternAccess().getResponseInvarianceKeyword_9_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group_9__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pattern__Group_9__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group_9__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternAccess().getResponseInvarianceParserRuleCall_9_1()); }
	ruleResponseInvariance
	{ after(grammarAccess.getPatternAccess().getResponseInvarianceParserRuleCall_9_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Universality__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Universality__Group__0__Impl
	rule__Universality__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Universality__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUniversalityAccess().getItIsAlwaysTheCaseThatKeyword_0()); }
	'it-is-always-the-case-that'
	{ after(grammarAccess.getUniversalityAccess().getItIsAlwaysTheCaseThatKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Universality__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Universality__Group__1__Impl
	rule__Universality__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Universality__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUniversalityAccess().getPAssignment_1()); }
	(rule__Universality__PAssignment_1)
	{ after(grammarAccess.getUniversalityAccess().getPAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Universality__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Universality__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Universality__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUniversalityAccess().getHoldsKeyword_2()); }
	('holds')?
	{ after(grammarAccess.getUniversalityAccess().getHoldsKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Absence__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Absence__Group__0__Impl
	rule__Absence__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Absence__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAbsenceAccess().getItIsNeverTheCaseThatKeyword_0()); }
	'It-is-never-the-case-that'
	{ after(grammarAccess.getAbsenceAccess().getItIsNeverTheCaseThatKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Absence__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Absence__Group__1__Impl
	rule__Absence__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Absence__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAbsenceAccess().getPAssignment_1()); }
	(rule__Absence__PAssignment_1)
	{ after(grammarAccess.getAbsenceAccess().getPAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Absence__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Absence__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Absence__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAbsenceAccess().getHoldsKeyword_2()); }
	('holds')?
	{ after(grammarAccess.getAbsenceAccess().getHoldsKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Existence__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Existence__Group__0__Impl
	rule__Existence__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Existence__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExistenceAccess().getEventuallyKeyword_0()); }
	'Eventually'
	{ after(grammarAccess.getExistenceAccess().getEventuallyKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Existence__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Existence__Group__1__Impl
	rule__Existence__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Existence__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExistenceAccess().getPAssignment_1()); }
	(rule__Existence__PAssignment_1)
	{ after(grammarAccess.getExistenceAccess().getPAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Existence__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Existence__Group__2__Impl
	rule__Existence__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Existence__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExistenceAccess().getHoldsKeyword_2()); }
	('holds')?
	{ after(grammarAccess.getExistenceAccess().getHoldsKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Existence__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Existence__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Existence__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExistenceAccess().getTimeAssignment_3()); }
	(rule__Existence__TimeAssignment_3)
	{ after(grammarAccess.getExistenceAccess().getTimeAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Response__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Response__Group__0__Impl
	rule__Response__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Response__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getResponseAccess().getIfKeyword_0()); }
	'if'
	{ after(grammarAccess.getResponseAccess().getIfKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Response__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Response__Group__1__Impl
	rule__Response__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Response__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getResponseAccess().getPAssignment_1()); }
	(rule__Response__PAssignment_1)
	{ after(grammarAccess.getResponseAccess().getPAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Response__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Response__Group__2__Impl
	rule__Response__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Response__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getResponseAccess().getThenInResponseKeyword_2()); }
	'then-in-response'
	{ after(grammarAccess.getResponseAccess().getThenInResponseKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Response__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Response__Group__3__Impl
	rule__Response__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Response__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getResponseAccess().getSAssignment_3()); }
	(rule__Response__SAssignment_3)
	{ after(grammarAccess.getResponseAccess().getSAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Response__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Response__Group__4__Impl
	rule__Response__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Response__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getResponseAccess().getEventuallyHoldsKeyword_4()); }
	('eventually holds')?
	{ after(grammarAccess.getResponseAccess().getEventuallyHoldsKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Response__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Response__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Response__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getResponseAccess().getTimeAssignment_5()); }
	(rule__Response__TimeAssignment_5)
	{ after(grammarAccess.getResponseAccess().getTimeAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Number__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Number__Group__0__Impl
	rule__Number__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumberAccess().getSignAssignment_0()); }
	(rule__Number__SignAssignment_0)?
	{ after(grammarAccess.getNumberAccess().getSignAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Number__Group__1__Impl
	rule__Number__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumberAccess().getIntValueAssignment_1()); }
	(rule__Number__IntValueAssignment_1)
	{ after(grammarAccess.getNumberAccess().getIntValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Number__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumberAccess().getGroup_2()); }
	(rule__Number__Group_2__0)?
	{ after(grammarAccess.getNumberAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Number__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Number__Group_2__0__Impl
	rule__Number__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumberAccess().getFullStopKeyword_2_0()); }
	'.'
	{ after(grammarAccess.getNumberAccess().getFullStopKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Number__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumberAccess().getDecimalValueAssignment_2_1()); }
	(rule__Number__DecimalValueAssignment_2_1)
	{ after(grammarAccess.getNumberAccess().getDecimalValueAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group__0__Impl
	rule__Expression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getAlternatives_0()); }
	(rule__Expression__Alternatives_0)
	{ after(grammarAccess.getExpressionAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group__1__Impl
	rule__Expression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getOperatorAssignment_1()); }
	(rule__Expression__OperatorAssignment_1)
	{ after(grammarAccess.getExpressionAccess().getOperatorAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getAlternatives_2()); }
	(rule__Expression__Alternatives_2)
	{ after(grammarAccess.getExpressionAccess().getAlternatives_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__UpperTimeBound__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UpperTimeBound__Group__0__Impl
	rule__UpperTimeBound__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UpperTimeBound__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUpperTimeBoundAccess().getWithinKeyword_0()); }
	'within'
	{ after(grammarAccess.getUpperTimeBoundAccess().getWithinKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UpperTimeBound__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UpperTimeBound__Group__1__Impl
	rule__UpperTimeBound__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UpperTimeBound__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUpperTimeBoundAccess().getValueAssignment_1()); }
	(rule__UpperTimeBound__ValueAssignment_1)
	{ after(grammarAccess.getUpperTimeBoundAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UpperTimeBound__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UpperTimeBound__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UpperTimeBound__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUpperTimeBoundAccess().getUnitAssignment_2()); }
	(rule__UpperTimeBound__UnitAssignment_2)
	{ after(grammarAccess.getUpperTimeBoundAccess().getUnitAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LowerTimeBound__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LowerTimeBound__Group__0__Impl
	rule__LowerTimeBound__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LowerTimeBound__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLowerTimeBoundAccess().getAfterKeyword_0()); }
	'after'
	{ after(grammarAccess.getLowerTimeBoundAccess().getAfterKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LowerTimeBound__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LowerTimeBound__Group__1__Impl
	rule__LowerTimeBound__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LowerTimeBound__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLowerTimeBoundAccess().getValueAssignment_1()); }
	(rule__LowerTimeBound__ValueAssignment_1)
	{ after(grammarAccess.getLowerTimeBoundAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LowerTimeBound__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LowerTimeBound__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LowerTimeBound__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLowerTimeBoundAccess().getUnitAssignment_2()); }
	(rule__LowerTimeBound__UnitAssignment_2)
	{ after(grammarAccess.getLowerTimeBoundAccess().getUnitAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Interval__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Interval__Group__0__Impl
	rule__Interval__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Interval__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntervalAccess().getBetweenKeyword_0()); }
	'between'
	{ after(grammarAccess.getIntervalAccess().getBetweenKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Interval__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Interval__Group__1__Impl
	rule__Interval__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Interval__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntervalAccess().getMinAssignment_1()); }
	(rule__Interval__MinAssignment_1)
	{ after(grammarAccess.getIntervalAccess().getMinAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Interval__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Interval__Group__2__Impl
	rule__Interval__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Interval__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntervalAccess().getAndKeyword_2()); }
	'and'
	{ after(grammarAccess.getIntervalAccess().getAndKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Interval__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Interval__Group__3__Impl
	rule__Interval__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Interval__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntervalAccess().getMaxAssignment_3()); }
	(rule__Interval__MaxAssignment_3)
	{ after(grammarAccess.getIntervalAccess().getMaxAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Interval__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Interval__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Interval__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntervalAccess().getUnitAssignment_4()); }
	(rule__Interval__UnitAssignment_4)
	{ after(grammarAccess.getIntervalAccess().getUnitAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__SignalsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getSignalsSignalParserRuleCall_0_0()); }
		ruleSignal
		{ after(grammarAccess.getModelAccess().getSignalsSignalParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__SpecificationsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getSpecificationsSpecificationParserRuleCall_1_0()); }
		ruleSpecification
		{ after(grammarAccess.getModelAccess().getSpecificationsSpecificationParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSignalAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getSignalAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__QueueNameAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSignalAccess().getQueueNameSTRINGTerminalRuleCall_3_0()); }
		RULE_STRING
		{ after(grammarAccess.getSignalAccess().getQueueNameSTRINGTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Specification__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSpecificationAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getSpecificationAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Specification__ScopeAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSpecificationAccess().getScopeScopeParserRuleCall_4_0()); }
		ruleScope
		{ after(grammarAccess.getSpecificationAccess().getScopeScopeParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Specification__PatternAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSpecificationAccess().getPatternPatternParserRuleCall_6_0()); }
		rulePattern
		{ after(grammarAccess.getSpecificationAccess().getPatternPatternParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Scope__RAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getScopeAccess().getRExpressionParserRuleCall_1_2_0()); }
		ruleExpression
		{ after(grammarAccess.getScopeAccess().getRExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Scope__QAssignment_2_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getScopeAccess().getQExpressionParserRuleCall_2_2_0()); }
		ruleExpression
		{ after(grammarAccess.getScopeAccess().getQExpressionParserRuleCall_2_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Scope__QAssignment_3_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getScopeAccess().getQExpressionParserRuleCall_3_2_0()); }
		ruleExpression
		{ after(grammarAccess.getScopeAccess().getQExpressionParserRuleCall_3_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Scope__RAssignment_3_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getScopeAccess().getRExpressionParserRuleCall_3_4_0()); }
		ruleExpression
		{ after(grammarAccess.getScopeAccess().getRExpressionParserRuleCall_3_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Scope__QAssignment_4_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getScopeAccess().getQExpressionParserRuleCall_4_2_0()); }
		ruleExpression
		{ after(grammarAccess.getScopeAccess().getQExpressionParserRuleCall_4_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Scope__RAssignment_4_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getScopeAccess().getRExpressionParserRuleCall_4_4_0()); }
		ruleExpression
		{ after(grammarAccess.getScopeAccess().getRExpressionParserRuleCall_4_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Universality__PAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUniversalityAccess().getPExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getUniversalityAccess().getPExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Absence__PAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAbsenceAccess().getPExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getAbsenceAccess().getPExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Existence__PAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExistenceAccess().getPExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getExistenceAccess().getPExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Existence__TimeAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExistenceAccess().getTimeTimeParserRuleCall_3_0()); }
		ruleTime
		{ after(grammarAccess.getExistenceAccess().getTimeTimeParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Response__PAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getResponseAccess().getPExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getResponseAccess().getPExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Response__SAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getResponseAccess().getSExpressionParserRuleCall_3_0()); }
		ruleExpression
		{ after(grammarAccess.getResponseAccess().getSExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Response__TimeAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getResponseAccess().getTimeTimeParserRuleCall_5_0()); }
		ruleTime
		{ after(grammarAccess.getResponseAccess().getTimeTimeParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__SignAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumberAccess().getSignHyphenMinusKeyword_0_0()); }
		(
			{ before(grammarAccess.getNumberAccess().getSignHyphenMinusKeyword_0_0()); }
			'-'
			{ after(grammarAccess.getNumberAccess().getSignHyphenMinusKeyword_0_0()); }
		)
		{ after(grammarAccess.getNumberAccess().getSignHyphenMinusKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__IntValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumberAccess().getIntValueINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getNumberAccess().getIntValueINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Number__DecimalValueAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumberAccess().getDecimalValueINTTerminalRuleCall_2_1_0()); }
		RULE_INT
		{ after(grammarAccess.getNumberAccess().getDecimalValueINTTerminalRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__S1Assignment_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getS1SignalCrossReference_0_0_0()); }
		(
			{ before(grammarAccess.getExpressionAccess().getS1SignalIDTerminalRuleCall_0_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getExpressionAccess().getS1SignalIDTerminalRuleCall_0_0_0_1()); }
		)
		{ after(grammarAccess.getExpressionAccess().getS1SignalCrossReference_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__F1Assignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getF1NumberParserRuleCall_0_1_0()); }
		ruleNumber
		{ after(grammarAccess.getExpressionAccess().getF1NumberParserRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__OperatorAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getOperatorAlternatives_1_0()); }
		(rule__Expression__OperatorAlternatives_1_0)
		{ after(grammarAccess.getExpressionAccess().getOperatorAlternatives_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__S2Assignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getS2SignalCrossReference_2_0_0()); }
		(
			{ before(grammarAccess.getExpressionAccess().getS2SignalIDTerminalRuleCall_2_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getExpressionAccess().getS2SignalIDTerminalRuleCall_2_0_0_1()); }
		)
		{ after(grammarAccess.getExpressionAccess().getS2SignalCrossReference_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__F2Assignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getF2NumberParserRuleCall_2_1_0()); }
		ruleNumber
		{ after(grammarAccess.getExpressionAccess().getF2NumberParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UpperTimeBound__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUpperTimeBoundAccess().getValueINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getUpperTimeBoundAccess().getValueINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UpperTimeBound__UnitAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUpperTimeBoundAccess().getUnitTimeUnitParserRuleCall_2_0()); }
		ruleTimeUnit
		{ after(grammarAccess.getUpperTimeBoundAccess().getUnitTimeUnitParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LowerTimeBound__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLowerTimeBoundAccess().getValueINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getLowerTimeBoundAccess().getValueINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LowerTimeBound__UnitAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLowerTimeBoundAccess().getUnitTimeUnitParserRuleCall_2_0()); }
		ruleTimeUnit
		{ after(grammarAccess.getLowerTimeBoundAccess().getUnitTimeUnitParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Interval__MinAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIntervalAccess().getMinINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getIntervalAccess().getMinINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Interval__MaxAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIntervalAccess().getMaxINTTerminalRuleCall_3_0()); }
		RULE_INT
		{ after(grammarAccess.getIntervalAccess().getMaxINTTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Interval__UnitAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIntervalAccess().getUnitTimeUnitParserRuleCall_4_0()); }
		ruleTimeUnit
		{ after(grammarAccess.getIntervalAccess().getUnitTimeUnitParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
