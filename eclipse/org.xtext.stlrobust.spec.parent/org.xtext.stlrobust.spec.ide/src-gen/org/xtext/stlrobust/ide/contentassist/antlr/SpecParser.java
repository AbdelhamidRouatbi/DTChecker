/*
 * generated by Xtext 2.37.0
 */
package org.xtext.stlrobust.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.stlrobust.ide.contentassist.antlr.internal.InternalSpecParser;
import org.xtext.stlrobust.services.SpecGrammarAccess;

public class SpecParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(SpecGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, SpecGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getScopeAccess().getAlternatives(), "rule__Scope__Alternatives");
			builder.put(grammarAccess.getPatternAccess().getAlternatives(), "rule__Pattern__Alternatives");
			builder.put(grammarAccess.getExpressionAccess().getAlternatives_0(), "rule__Expression__Alternatives_0");
			builder.put(grammarAccess.getExpressionAccess().getOperatorAlternatives_1_0(), "rule__Expression__OperatorAlternatives_1_0");
			builder.put(grammarAccess.getExpressionAccess().getAlternatives_2(), "rule__Expression__Alternatives_2");
			builder.put(grammarAccess.getTimeAccess().getAlternatives(), "rule__Time__Alternatives");
			builder.put(grammarAccess.getTimeUnitAccess().getAlternatives(), "rule__TimeUnit__Alternatives");
			builder.put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
			builder.put(grammarAccess.getSignalAccess().getGroup(), "rule__Signal__Group__0");
			builder.put(grammarAccess.getSpecificationAccess().getGroup(), "rule__Specification__Group__0");
			builder.put(grammarAccess.getScopeAccess().getGroup_0(), "rule__Scope__Group_0__0");
			builder.put(grammarAccess.getScopeAccess().getGroup_1(), "rule__Scope__Group_1__0");
			builder.put(grammarAccess.getScopeAccess().getGroup_2(), "rule__Scope__Group_2__0");
			builder.put(grammarAccess.getScopeAccess().getGroup_3(), "rule__Scope__Group_3__0");
			builder.put(grammarAccess.getScopeAccess().getGroup_4(), "rule__Scope__Group_4__0");
			builder.put(grammarAccess.getPatternAccess().getGroup_0(), "rule__Pattern__Group_0__0");
			builder.put(grammarAccess.getPatternAccess().getGroup_1(), "rule__Pattern__Group_1__0");
			builder.put(grammarAccess.getPatternAccess().getGroup_2(), "rule__Pattern__Group_2__0");
			builder.put(grammarAccess.getPatternAccess().getGroup_3(), "rule__Pattern__Group_3__0");
			builder.put(grammarAccess.getPatternAccess().getGroup_4(), "rule__Pattern__Group_4__0");
			builder.put(grammarAccess.getPatternAccess().getGroup_5(), "rule__Pattern__Group_5__0");
			builder.put(grammarAccess.getPatternAccess().getGroup_6(), "rule__Pattern__Group_6__0");
			builder.put(grammarAccess.getPatternAccess().getGroup_7(), "rule__Pattern__Group_7__0");
			builder.put(grammarAccess.getPatternAccess().getGroup_8(), "rule__Pattern__Group_8__0");
			builder.put(grammarAccess.getPatternAccess().getGroup_9(), "rule__Pattern__Group_9__0");
			builder.put(grammarAccess.getUniversalityAccess().getGroup(), "rule__Universality__Group__0");
			builder.put(grammarAccess.getAbsenceAccess().getGroup(), "rule__Absence__Group__0");
			builder.put(grammarAccess.getExistenceAccess().getGroup(), "rule__Existence__Group__0");
			builder.put(grammarAccess.getResponseAccess().getGroup(), "rule__Response__Group__0");
			builder.put(grammarAccess.getNumberAccess().getGroup(), "rule__Number__Group__0");
			builder.put(grammarAccess.getNumberAccess().getGroup_2(), "rule__Number__Group_2__0");
			builder.put(grammarAccess.getExpressionAccess().getGroup(), "rule__Expression__Group__0");
			builder.put(grammarAccess.getUpperTimeBoundAccess().getGroup(), "rule__UpperTimeBound__Group__0");
			builder.put(grammarAccess.getLowerTimeBoundAccess().getGroup(), "rule__LowerTimeBound__Group__0");
			builder.put(grammarAccess.getIntervalAccess().getGroup(), "rule__Interval__Group__0");
			builder.put(grammarAccess.getModelAccess().getSignalsAssignment_0(), "rule__Model__SignalsAssignment_0");
			builder.put(grammarAccess.getModelAccess().getSpecificationsAssignment_1(), "rule__Model__SpecificationsAssignment_1");
			builder.put(grammarAccess.getSignalAccess().getNameAssignment_1(), "rule__Signal__NameAssignment_1");
			builder.put(grammarAccess.getSignalAccess().getQueueNameAssignment_3(), "rule__Signal__QueueNameAssignment_3");
			builder.put(grammarAccess.getSpecificationAccess().getNameAssignment_1(), "rule__Specification__NameAssignment_1");
			builder.put(grammarAccess.getSpecificationAccess().getScopeAssignment_4(), "rule__Specification__ScopeAssignment_4");
			builder.put(grammarAccess.getSpecificationAccess().getPatternAssignment_6(), "rule__Specification__PatternAssignment_6");
			builder.put(grammarAccess.getScopeAccess().getRAssignment_1_2(), "rule__Scope__RAssignment_1_2");
			builder.put(grammarAccess.getScopeAccess().getQAssignment_2_2(), "rule__Scope__QAssignment_2_2");
			builder.put(grammarAccess.getScopeAccess().getQAssignment_3_2(), "rule__Scope__QAssignment_3_2");
			builder.put(grammarAccess.getScopeAccess().getRAssignment_3_4(), "rule__Scope__RAssignment_3_4");
			builder.put(grammarAccess.getScopeAccess().getQAssignment_4_2(), "rule__Scope__QAssignment_4_2");
			builder.put(grammarAccess.getScopeAccess().getRAssignment_4_4(), "rule__Scope__RAssignment_4_4");
			builder.put(grammarAccess.getUniversalityAccess().getPAssignment_1(), "rule__Universality__PAssignment_1");
			builder.put(grammarAccess.getAbsenceAccess().getPAssignment_1(), "rule__Absence__PAssignment_1");
			builder.put(grammarAccess.getExistenceAccess().getPAssignment_1(), "rule__Existence__PAssignment_1");
			builder.put(grammarAccess.getExistenceAccess().getTimeAssignment_3(), "rule__Existence__TimeAssignment_3");
			builder.put(grammarAccess.getResponseAccess().getPAssignment_1(), "rule__Response__PAssignment_1");
			builder.put(grammarAccess.getResponseAccess().getSAssignment_3(), "rule__Response__SAssignment_3");
			builder.put(grammarAccess.getResponseAccess().getTimeAssignment_5(), "rule__Response__TimeAssignment_5");
			builder.put(grammarAccess.getNumberAccess().getSignAssignment_0(), "rule__Number__SignAssignment_0");
			builder.put(grammarAccess.getNumberAccess().getIntValueAssignment_1(), "rule__Number__IntValueAssignment_1");
			builder.put(grammarAccess.getNumberAccess().getDecimalValueAssignment_2_1(), "rule__Number__DecimalValueAssignment_2_1");
			builder.put(grammarAccess.getExpressionAccess().getS1Assignment_0_0(), "rule__Expression__S1Assignment_0_0");
			builder.put(grammarAccess.getExpressionAccess().getF1Assignment_0_1(), "rule__Expression__F1Assignment_0_1");
			builder.put(grammarAccess.getExpressionAccess().getOperatorAssignment_1(), "rule__Expression__OperatorAssignment_1");
			builder.put(grammarAccess.getExpressionAccess().getS2Assignment_2_0(), "rule__Expression__S2Assignment_2_0");
			builder.put(grammarAccess.getExpressionAccess().getF2Assignment_2_1(), "rule__Expression__F2Assignment_2_1");
			builder.put(grammarAccess.getUpperTimeBoundAccess().getValueAssignment_1(), "rule__UpperTimeBound__ValueAssignment_1");
			builder.put(grammarAccess.getUpperTimeBoundAccess().getUnitAssignment_2(), "rule__UpperTimeBound__UnitAssignment_2");
			builder.put(grammarAccess.getLowerTimeBoundAccess().getValueAssignment_1(), "rule__LowerTimeBound__ValueAssignment_1");
			builder.put(grammarAccess.getLowerTimeBoundAccess().getUnitAssignment_2(), "rule__LowerTimeBound__UnitAssignment_2");
			builder.put(grammarAccess.getIntervalAccess().getMinAssignment_1(), "rule__Interval__MinAssignment_1");
			builder.put(grammarAccess.getIntervalAccess().getMaxAssignment_3(), "rule__Interval__MaxAssignment_3");
			builder.put(grammarAccess.getIntervalAccess().getUnitAssignment_4(), "rule__Interval__UnitAssignment_4");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private SpecGrammarAccess grammarAccess;

	@Override
	protected InternalSpecParser createParser() {
		InternalSpecParser result = new InternalSpecParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public SpecGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(SpecGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
