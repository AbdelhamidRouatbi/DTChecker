/*
 * generated by Xtext 2.37.0
 */
package org.xtext.stlrobust.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SpecGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.stlrobust.Spec.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSignalsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSignalsSignalParserRuleCall_0_0 = (RuleCall)cSignalsAssignment_0.eContents().get(0);
		private final Assignment cSpecificationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSpecificationsSpecificationParserRuleCall_1_0 = (RuleCall)cSpecificationsAssignment_1.eContents().get(0);
		
		//Model:
		//    Signals+=Signal*
		//    Specifications+=Specification*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Signals+=Signal*
		//Specifications+=Specification*
		public Group getGroup() { return cGroup; }
		
		//Signals+=Signal*
		public Assignment getSignalsAssignment_0() { return cSignalsAssignment_0; }
		
		//Signal
		public RuleCall getSignalsSignalParserRuleCall_0_0() { return cSignalsSignalParserRuleCall_0_0; }
		
		//Specifications+=Specification*
		public Assignment getSpecificationsAssignment_1() { return cSpecificationsAssignment_1; }
		
		//Specification
		public RuleCall getSpecificationsSpecificationParserRuleCall_1_0() { return cSpecificationsSpecificationParserRuleCall_1_0; }
	}
	public class SignalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.stlrobust.Spec.Signal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSignalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cFromKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cQueueNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cQueueNameSTRINGTerminalRuleCall_3_0 = (RuleCall)cQueueNameAssignment_3.eContents().get(0);
		
		//Signal:
		//    'signal' name=ID 'from' queueName=STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'signal' name=ID 'from' queueName=STRING
		public Group getGroup() { return cGroup; }
		
		//'signal'
		public Keyword getSignalKeyword_0() { return cSignalKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'from'
		public Keyword getFromKeyword_2() { return cFromKeyword_2; }
		
		//queueName=STRING
		public Assignment getQueueNameAssignment_3() { return cQueueNameAssignment_3; }
		
		//STRING
		public RuleCall getQueueNameSTRINGTerminalRuleCall_3_0() { return cQueueNameSTRINGTerminalRuleCall_3_0; }
	}
	public class SpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.stlrobust.Spec.Specification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSpecificationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cScopeKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cScopeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cScopeScopeParserRuleCall_4_0 = (RuleCall)cScopeAssignment_4.eContents().get(0);
		private final Keyword cPatternKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cPatternAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cPatternPatternParserRuleCall_6_0 = (RuleCall)cPatternAssignment_6.eContents().get(0);
		
		//Specification:
		//    'specification' name=ID ':'
		//    'scope' scope=Scope
		//    'pattern' pattern=Pattern
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'specification' name=ID ':'
		//'scope' scope=Scope
		//'pattern' pattern=Pattern
		public Group getGroup() { return cGroup; }
		
		//'specification'
		public Keyword getSpecificationKeyword_0() { return cSpecificationKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//'scope'
		public Keyword getScopeKeyword_3() { return cScopeKeyword_3; }
		
		//scope=Scope
		public Assignment getScopeAssignment_4() { return cScopeAssignment_4; }
		
		//Scope
		public RuleCall getScopeScopeParserRuleCall_4_0() { return cScopeScopeParserRuleCall_4_0; }
		
		//'pattern'
		public Keyword getPatternKeyword_5() { return cPatternKeyword_5; }
		
		//pattern=Pattern
		public Assignment getPatternAssignment_6() { return cPatternAssignment_6; }
		
		//Pattern
		public RuleCall getPatternPatternParserRuleCall_6_0() { return cPatternPatternParserRuleCall_6_0; }
	}
	public class ScopeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.stlrobust.Spec.Scope");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cGlobalScopeAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cGloballyKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cBeforeScopeAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cBeforeKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRExpressionParserRuleCall_1_2_0 = (RuleCall)cRAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cAfterScopeAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cAfterKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cQAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cQExpressionParserRuleCall_2_2_0 = (RuleCall)cQAssignment_2_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cBetweenScopeAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cBetweenKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cQAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cQExpressionParserRuleCall_3_2_0 = (RuleCall)cQAssignment_3_2.eContents().get(0);
		private final Keyword cAndKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Assignment cRAssignment_3_4 = (Assignment)cGroup_3.eContents().get(4);
		private final RuleCall cRExpressionParserRuleCall_3_4_0 = (RuleCall)cRAssignment_3_4.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cAfterUntilScopeAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cAfterKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cQAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cQExpressionParserRuleCall_4_2_0 = (RuleCall)cQAssignment_4_2.eContents().get(0);
		private final Keyword cUntilKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Assignment cRAssignment_4_4 = (Assignment)cGroup_4.eContents().get(4);
		private final RuleCall cRExpressionParserRuleCall_4_4_0 = (RuleCall)cRAssignment_4_4.eContents().get(0);
		
		//Scope:
		//    {GlobalScope} 'Globally' |{BeforeScope} 'Before' r=Expression |{AfterScope} 'After' q=Expression |
		//    {BetweenScope} 'Between' q=Expression 'and' r=Expression |{AfterUntilScope} 'After' q=Expression 'until' r=Expression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{GlobalScope} 'Globally' |{BeforeScope} 'Before' r=Expression |{AfterScope} 'After' q=Expression |
		//{BetweenScope} 'Between' q=Expression 'and' r=Expression |{AfterUntilScope} 'After' q=Expression 'until' r=Expression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{GlobalScope} 'Globally'
		public Group getGroup_0() { return cGroup_0; }
		
		//{GlobalScope}
		public Action getGlobalScopeAction_0_0() { return cGlobalScopeAction_0_0; }
		
		//'Globally'
		public Keyword getGloballyKeyword_0_1() { return cGloballyKeyword_0_1; }
		
		//{BeforeScope} 'Before' r=Expression
		public Group getGroup_1() { return cGroup_1; }
		
		//{BeforeScope}
		public Action getBeforeScopeAction_1_0() { return cBeforeScopeAction_1_0; }
		
		//'Before'
		public Keyword getBeforeKeyword_1_1() { return cBeforeKeyword_1_1; }
		
		//r=Expression
		public Assignment getRAssignment_1_2() { return cRAssignment_1_2; }
		
		//Expression
		public RuleCall getRExpressionParserRuleCall_1_2_0() { return cRExpressionParserRuleCall_1_2_0; }
		
		//{AfterScope} 'After' q=Expression
		public Group getGroup_2() { return cGroup_2; }
		
		//{AfterScope}
		public Action getAfterScopeAction_2_0() { return cAfterScopeAction_2_0; }
		
		//'After'
		public Keyword getAfterKeyword_2_1() { return cAfterKeyword_2_1; }
		
		//q=Expression
		public Assignment getQAssignment_2_2() { return cQAssignment_2_2; }
		
		//Expression
		public RuleCall getQExpressionParserRuleCall_2_2_0() { return cQExpressionParserRuleCall_2_2_0; }
		
		//{BetweenScope} 'Between' q=Expression 'and' r=Expression
		public Group getGroup_3() { return cGroup_3; }
		
		//{BetweenScope}
		public Action getBetweenScopeAction_3_0() { return cBetweenScopeAction_3_0; }
		
		//'Between'
		public Keyword getBetweenKeyword_3_1() { return cBetweenKeyword_3_1; }
		
		//q=Expression
		public Assignment getQAssignment_3_2() { return cQAssignment_3_2; }
		
		//Expression
		public RuleCall getQExpressionParserRuleCall_3_2_0() { return cQExpressionParserRuleCall_3_2_0; }
		
		//'and'
		public Keyword getAndKeyword_3_3() { return cAndKeyword_3_3; }
		
		//r=Expression
		public Assignment getRAssignment_3_4() { return cRAssignment_3_4; }
		
		//Expression
		public RuleCall getRExpressionParserRuleCall_3_4_0() { return cRExpressionParserRuleCall_3_4_0; }
		
		//{AfterUntilScope} 'After' q=Expression 'until' r=Expression
		public Group getGroup_4() { return cGroup_4; }
		
		//{AfterUntilScope}
		public Action getAfterUntilScopeAction_4_0() { return cAfterUntilScopeAction_4_0; }
		
		//'After'
		public Keyword getAfterKeyword_4_1() { return cAfterKeyword_4_1; }
		
		//q=Expression
		public Assignment getQAssignment_4_2() { return cQAssignment_4_2; }
		
		//Expression
		public RuleCall getQExpressionParserRuleCall_4_2_0() { return cQExpressionParserRuleCall_4_2_0; }
		
		//'until'
		public Keyword getUntilKeyword_4_3() { return cUntilKeyword_4_3; }
		
		//r=Expression
		public Assignment getRAssignment_4_4() { return cRAssignment_4_4; }
		
		//Expression
		public RuleCall getRExpressionParserRuleCall_4_4_0() { return cRExpressionParserRuleCall_4_4_0; }
	}
	public class PatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.stlrobust.Spec.Pattern");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cUniversalityKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cUniversalityParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cAbsenceKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cAbsenceParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cExistenceKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cExistenceParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cMinimumDurationKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cMinimumDurationParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cMaximumDurationKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final RuleCall cMaximumDurationParserRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cRecurrenceKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final RuleCall cRecurrenceParserRuleCall_5_1 = (RuleCall)cGroup_5.eContents().get(1);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Keyword cPrecedenceKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final RuleCall cPrecedenceParserRuleCall_6_1 = (RuleCall)cGroup_6.eContents().get(1);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Keyword cUntilKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final RuleCall cUntilParserRuleCall_7_1 = (RuleCall)cGroup_7.eContents().get(1);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Keyword cResponseKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final RuleCall cResponseParserRuleCall_8_1 = (RuleCall)cGroup_8.eContents().get(1);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Keyword cResponseInvarianceKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final RuleCall cResponseInvarianceParserRuleCall_9_1 = (RuleCall)cGroup_9.eContents().get(1);
		
		//Pattern:
		//    'Universality:' Universality |
		//    'Absence:' Absence |
		//    'Existence:' Existence |
		//    'MinimumDuration:' MinimumDuration |
		//    'MaximumDuration:' MaximumDuration |
		//    'Recurrence:' Recurrence |
		//    'Precedence:' Precedence |
		//    'Until:' Until |
		//    'Response:' Response |
		//    'ResponseInvariance:' ResponseInvariance
		//    //'PrecedenceChain1N:' PrecedenceChain1N |
		//    //'PrecedenceChainN1:' PrecedenceChainN1 |
		//    //'ResponseChain1N:' ResponseChain1N |
		//    //'ResponseChainN1:' ResponseChainN1 |
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'Universality:' Universality |
		//'Absence:' Absence |
		//'Existence:' Existence |
		//'MinimumDuration:' MinimumDuration |
		//'MaximumDuration:' MaximumDuration |
		//'Recurrence:' Recurrence |
		//'Precedence:' Precedence |
		//'Until:' Until |
		//'Response:' Response |
		//'ResponseInvariance:' ResponseInvariance
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'Universality:' Universality
		public Group getGroup_0() { return cGroup_0; }
		
		//'Universality:'
		public Keyword getUniversalityKeyword_0_0() { return cUniversalityKeyword_0_0; }
		
		//Universality
		public RuleCall getUniversalityParserRuleCall_0_1() { return cUniversalityParserRuleCall_0_1; }
		
		//'Absence:' Absence
		public Group getGroup_1() { return cGroup_1; }
		
		//'Absence:'
		public Keyword getAbsenceKeyword_1_0() { return cAbsenceKeyword_1_0; }
		
		//Absence
		public RuleCall getAbsenceParserRuleCall_1_1() { return cAbsenceParserRuleCall_1_1; }
		
		//'Existence:' Existence
		public Group getGroup_2() { return cGroup_2; }
		
		//'Existence:'
		public Keyword getExistenceKeyword_2_0() { return cExistenceKeyword_2_0; }
		
		//Existence
		public RuleCall getExistenceParserRuleCall_2_1() { return cExistenceParserRuleCall_2_1; }
		
		//'MinimumDuration:' MinimumDuration
		public Group getGroup_3() { return cGroup_3; }
		
		//'MinimumDuration:'
		public Keyword getMinimumDurationKeyword_3_0() { return cMinimumDurationKeyword_3_0; }
		
		//MinimumDuration
		public RuleCall getMinimumDurationParserRuleCall_3_1() { return cMinimumDurationParserRuleCall_3_1; }
		
		//'MaximumDuration:' MaximumDuration
		public Group getGroup_4() { return cGroup_4; }
		
		//'MaximumDuration:'
		public Keyword getMaximumDurationKeyword_4_0() { return cMaximumDurationKeyword_4_0; }
		
		//MaximumDuration
		public RuleCall getMaximumDurationParserRuleCall_4_1() { return cMaximumDurationParserRuleCall_4_1; }
		
		//'Recurrence:' Recurrence
		public Group getGroup_5() { return cGroup_5; }
		
		//'Recurrence:'
		public Keyword getRecurrenceKeyword_5_0() { return cRecurrenceKeyword_5_0; }
		
		//Recurrence
		public RuleCall getRecurrenceParserRuleCall_5_1() { return cRecurrenceParserRuleCall_5_1; }
		
		//'Precedence:' Precedence
		public Group getGroup_6() { return cGroup_6; }
		
		//'Precedence:'
		public Keyword getPrecedenceKeyword_6_0() { return cPrecedenceKeyword_6_0; }
		
		//Precedence
		public RuleCall getPrecedenceParserRuleCall_6_1() { return cPrecedenceParserRuleCall_6_1; }
		
		//'Until:' Until
		public Group getGroup_7() { return cGroup_7; }
		
		//'Until:'
		public Keyword getUntilKeyword_7_0() { return cUntilKeyword_7_0; }
		
		//Until
		public RuleCall getUntilParserRuleCall_7_1() { return cUntilParserRuleCall_7_1; }
		
		//'Response:' Response
		public Group getGroup_8() { return cGroup_8; }
		
		//'Response:'
		public Keyword getResponseKeyword_8_0() { return cResponseKeyword_8_0; }
		
		//Response
		public RuleCall getResponseParserRuleCall_8_1() { return cResponseParserRuleCall_8_1; }
		
		//'ResponseInvariance:' ResponseInvariance
		public Group getGroup_9() { return cGroup_9; }
		
		//'ResponseInvariance:'
		public Keyword getResponseInvarianceKeyword_9_0() { return cResponseInvarianceKeyword_9_0; }
		
		//ResponseInvariance
		public RuleCall getResponseInvarianceParserRuleCall_9_1() { return cResponseInvarianceParserRuleCall_9_1; }
	}
	public class UniversalityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.stlrobust.Spec.Universality");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cItIsAlwaysTheCaseThatKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPExpressionParserRuleCall_1_0 = (RuleCall)cPAssignment_1.eContents().get(0);
		private final Keyword cHoldsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Universality:
		//    "it-is-always-the-case-that" p=Expression 'holds'?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"it-is-always-the-case-that" p=Expression 'holds'?
		public Group getGroup() { return cGroup; }
		
		//"it-is-always-the-case-that"
		public Keyword getItIsAlwaysTheCaseThatKeyword_0() { return cItIsAlwaysTheCaseThatKeyword_0; }
		
		//p=Expression
		public Assignment getPAssignment_1() { return cPAssignment_1; }
		
		//Expression
		public RuleCall getPExpressionParserRuleCall_1_0() { return cPExpressionParserRuleCall_1_0; }
		
		//'holds'?
		public Keyword getHoldsKeyword_2() { return cHoldsKeyword_2; }
	}
	public class AbsenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.stlrobust.Spec.Absence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cItIsNeverTheCaseThatKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPExpressionParserRuleCall_1_0 = (RuleCall)cPAssignment_1.eContents().get(0);
		private final Keyword cHoldsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Absence:
		//    "It-is-never-the-case-that" p=Expression 'holds'?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"It-is-never-the-case-that" p=Expression 'holds'?
		public Group getGroup() { return cGroup; }
		
		//"It-is-never-the-case-that"
		public Keyword getItIsNeverTheCaseThatKeyword_0() { return cItIsNeverTheCaseThatKeyword_0; }
		
		//p=Expression
		public Assignment getPAssignment_1() { return cPAssignment_1; }
		
		//Expression
		public RuleCall getPExpressionParserRuleCall_1_0() { return cPExpressionParserRuleCall_1_0; }
		
		//'holds'?
		public Keyword getHoldsKeyword_2() { return cHoldsKeyword_2; }
	}
	public class ExistenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.stlrobust.Spec.Existence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEventuallyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPExpressionParserRuleCall_1_0 = (RuleCall)cPAssignment_1.eContents().get(0);
		private final Keyword cHoldsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTimeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTimeTimeParserRuleCall_3_0 = (RuleCall)cTimeAssignment_3.eContents().get(0);
		
		//Existence:
		//    "Eventually" p=Expression 'holds'? time=Time
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"Eventually" p=Expression 'holds'? time=Time
		public Group getGroup() { return cGroup; }
		
		//"Eventually"
		public Keyword getEventuallyKeyword_0() { return cEventuallyKeyword_0; }
		
		//p=Expression
		public Assignment getPAssignment_1() { return cPAssignment_1; }
		
		//Expression
		public RuleCall getPExpressionParserRuleCall_1_0() { return cPExpressionParserRuleCall_1_0; }
		
		//'holds'?
		public Keyword getHoldsKeyword_2() { return cHoldsKeyword_2; }
		
		//time=Time
		public Assignment getTimeAssignment_3() { return cTimeAssignment_3; }
		
		//Time
		public RuleCall getTimeTimeParserRuleCall_3_0() { return cTimeTimeParserRuleCall_3_0; }
	}
	public class MinimumDurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.stlrobust.Spec.MinimumDuration");
		private final Keyword cAKeyword = (Keyword)rule.eContents().get(1);
		
		//MinimumDuration:
		//    "a"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"a"
		public Keyword getAKeyword() { return cAKeyword; }
	}
	public class MaximumDurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.stlrobust.Spec.MaximumDuration");
		private final Keyword cAKeyword = (Keyword)rule.eContents().get(1);
		
		//MaximumDuration:
		//    "a"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"a"
		public Keyword getAKeyword() { return cAKeyword; }
	}
	public class RecurrenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.stlrobust.Spec.Recurrence");
		private final Keyword cAKeyword = (Keyword)rule.eContents().get(1);
		
		//Recurrence:
		//    "a"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"a"
		public Keyword getAKeyword() { return cAKeyword; }
	}
	public class PrecedenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.stlrobust.Spec.Precedence");
		private final Keyword cAKeyword = (Keyword)rule.eContents().get(1);
		
		//Precedence:
		//    "a"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"a"
		public Keyword getAKeyword() { return cAKeyword; }
	}
	public class UntilElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.stlrobust.Spec.Until");
		private final Keyword cAKeyword = (Keyword)rule.eContents().get(1);
		
		//Until:
		//    "a"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"a"
		public Keyword getAKeyword() { return cAKeyword; }
	}
	public class ResponseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.stlrobust.Spec.Response");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPExpressionParserRuleCall_1_0 = (RuleCall)cPAssignment_1.eContents().get(0);
		private final Keyword cThenInResponseKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSExpressionParserRuleCall_3_0 = (RuleCall)cSAssignment_3.eContents().get(0);
		private final Keyword cEventuallyHoldsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTimeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTimeTimeParserRuleCall_5_0 = (RuleCall)cTimeAssignment_5.eContents().get(0);
		
		//Response:
		//    "if" p=Expression "then-in-response" s=Expression ('eventually holds')? time=Time
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"if" p=Expression "then-in-response" s=Expression ('eventually holds')? time=Time
		public Group getGroup() { return cGroup; }
		
		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//p=Expression
		public Assignment getPAssignment_1() { return cPAssignment_1; }
		
		//Expression
		public RuleCall getPExpressionParserRuleCall_1_0() { return cPExpressionParserRuleCall_1_0; }
		
		//"then-in-response"
		public Keyword getThenInResponseKeyword_2() { return cThenInResponseKeyword_2; }
		
		//s=Expression
		public Assignment getSAssignment_3() { return cSAssignment_3; }
		
		//Expression
		public RuleCall getSExpressionParserRuleCall_3_0() { return cSExpressionParserRuleCall_3_0; }
		
		//('eventually holds')?
		public Keyword getEventuallyHoldsKeyword_4() { return cEventuallyHoldsKeyword_4; }
		
		//time=Time
		public Assignment getTimeAssignment_5() { return cTimeAssignment_5; }
		
		//Time
		public RuleCall getTimeTimeParserRuleCall_5_0() { return cTimeTimeParserRuleCall_5_0; }
	}
	public class ResponseInvarianceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.stlrobust.Spec.ResponseInvariance");
		private final Keyword cAKeyword = (Keyword)rule.eContents().get(1);
		
		//ResponseInvariance:
		//    "a"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"a"
		public Keyword getAKeyword() { return cAKeyword; }
	}
	public class NumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.stlrobust.Spec.Number");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSignAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cSignHyphenMinusKeyword_0_0 = (Keyword)cSignAssignment_0.eContents().get(0);
		private final Assignment cIntValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIntValueINTTerminalRuleCall_1_0 = (RuleCall)cIntValueAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cDecimalValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDecimalValueINTTerminalRuleCall_2_1_0 = (RuleCall)cDecimalValueAssignment_2_1.eContents().get(0);
		
		//Number:
		//    sign=('-')? intValue=INT ('.' decimalValue=INT)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//sign=('-')? intValue=INT ('.' decimalValue=INT)?
		public Group getGroup() { return cGroup; }
		
		//sign=('-')?
		public Assignment getSignAssignment_0() { return cSignAssignment_0; }
		
		//('-')
		public Keyword getSignHyphenMinusKeyword_0_0() { return cSignHyphenMinusKeyword_0_0; }
		
		//intValue=INT
		public Assignment getIntValueAssignment_1() { return cIntValueAssignment_1; }
		
		//INT
		public RuleCall getIntValueINTTerminalRuleCall_1_0() { return cIntValueINTTerminalRuleCall_1_0; }
		
		//('.' decimalValue=INT)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'.'
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }
		
		//decimalValue=INT
		public Assignment getDecimalValueAssignment_2_1() { return cDecimalValueAssignment_2_1; }
		
		//INT
		public RuleCall getDecimalValueINTTerminalRuleCall_2_1_0() { return cDecimalValueINTTerminalRuleCall_2_1_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.stlrobust.Spec.Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cS1Assignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final CrossReference cS1SignalCrossReference_0_0_0 = (CrossReference)cS1Assignment_0_0.eContents().get(0);
		private final RuleCall cS1SignalIDTerminalRuleCall_0_0_0_1 = (RuleCall)cS1SignalCrossReference_0_0_0.eContents().get(1);
		private final Assignment cF1Assignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cF1NumberParserRuleCall_0_1_0 = (RuleCall)cF1Assignment_0_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_0 = (Alternatives)cOperatorAssignment_1.eContents().get(0);
		private final Keyword cOperatorGreaterThanSignKeyword_1_0_0 = (Keyword)cOperatorAlternatives_1_0.eContents().get(0);
		private final Keyword cOperatorGreaterThanSignEqualsSignKeyword_1_0_1 = (Keyword)cOperatorAlternatives_1_0.eContents().get(1);
		private final Keyword cOperatorEqualsSignKeyword_1_0_2 = (Keyword)cOperatorAlternatives_1_0.eContents().get(2);
		private final Keyword cOperatorLessThanSignKeyword_1_0_3 = (Keyword)cOperatorAlternatives_1_0.eContents().get(3);
		private final Keyword cOperatorLessThanSignEqualsSignKeyword_1_0_4 = (Keyword)cOperatorAlternatives_1_0.eContents().get(4);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cS2Assignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final CrossReference cS2SignalCrossReference_2_0_0 = (CrossReference)cS2Assignment_2_0.eContents().get(0);
		private final RuleCall cS2SignalIDTerminalRuleCall_2_0_0_1 = (RuleCall)cS2SignalCrossReference_2_0_0.eContents().get(1);
		private final Assignment cF2Assignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cF2NumberParserRuleCall_2_1_0 = (RuleCall)cF2Assignment_2_1.eContents().get(0);
		
		//Expression:
		//    (s1=[Signal] | f1=Number) operator=('>' | '>=' | '=' | '<' | '<=') (s2=[Signal] | f2=Number)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(s1=[Signal] | f1=Number) operator=('>' | '>=' | '=' | '<' | '<=') (s2=[Signal] | f2=Number)
		public Group getGroup() { return cGroup; }
		
		//(s1=[Signal] | f1=Number)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//s1=[Signal]
		public Assignment getS1Assignment_0_0() { return cS1Assignment_0_0; }
		
		//[Signal]
		public CrossReference getS1SignalCrossReference_0_0_0() { return cS1SignalCrossReference_0_0_0; }
		
		//ID
		public RuleCall getS1SignalIDTerminalRuleCall_0_0_0_1() { return cS1SignalIDTerminalRuleCall_0_0_0_1; }
		
		//f1=Number
		public Assignment getF1Assignment_0_1() { return cF1Assignment_0_1; }
		
		//Number
		public RuleCall getF1NumberParserRuleCall_0_1_0() { return cF1NumberParserRuleCall_0_1_0; }
		
		//operator=('>' | '>=' | '=' | '<' | '<=')
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }
		
		//('>' | '>=' | '=' | '<' | '<=')
		public Alternatives getOperatorAlternatives_1_0() { return cOperatorAlternatives_1_0; }
		
		//'>'
		public Keyword getOperatorGreaterThanSignKeyword_1_0_0() { return cOperatorGreaterThanSignKeyword_1_0_0; }
		
		//'>='
		public Keyword getOperatorGreaterThanSignEqualsSignKeyword_1_0_1() { return cOperatorGreaterThanSignEqualsSignKeyword_1_0_1; }
		
		//'='
		public Keyword getOperatorEqualsSignKeyword_1_0_2() { return cOperatorEqualsSignKeyword_1_0_2; }
		
		//'<'
		public Keyword getOperatorLessThanSignKeyword_1_0_3() { return cOperatorLessThanSignKeyword_1_0_3; }
		
		//'<='
		public Keyword getOperatorLessThanSignEqualsSignKeyword_1_0_4() { return cOperatorLessThanSignEqualsSignKeyword_1_0_4; }
		
		//(s2=[Signal] | f2=Number)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//s2=[Signal]
		public Assignment getS2Assignment_2_0() { return cS2Assignment_2_0; }
		
		//[Signal]
		public CrossReference getS2SignalCrossReference_2_0_0() { return cS2SignalCrossReference_2_0_0; }
		
		//ID
		public RuleCall getS2SignalIDTerminalRuleCall_2_0_0_1() { return cS2SignalIDTerminalRuleCall_2_0_0_1; }
		
		//f2=Number
		public Assignment getF2Assignment_2_1() { return cF2Assignment_2_1; }
		
		//Number
		public RuleCall getF2NumberParserRuleCall_2_1_0() { return cF2NumberParserRuleCall_2_1_0; }
	}
	public class TimeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.stlrobust.Spec.Time");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUpperTimeBoundParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLowerTimeBoundParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIntervalParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Time:
		//    UpperTimeBound | LowerTimeBound | Interval
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//UpperTimeBound | LowerTimeBound | Interval
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//UpperTimeBound
		public RuleCall getUpperTimeBoundParserRuleCall_0() { return cUpperTimeBoundParserRuleCall_0; }
		
		//LowerTimeBound
		public RuleCall getLowerTimeBoundParserRuleCall_1() { return cLowerTimeBoundParserRuleCall_1; }
		
		//Interval
		public RuleCall getIntervalParserRuleCall_2() { return cIntervalParserRuleCall_2; }
	}
	public class UpperTimeBoundElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.stlrobust.Spec.UpperTimeBound");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWithinKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Assignment cUnitAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUnitTimeUnitParserRuleCall_2_0 = (RuleCall)cUnitAssignment_2.eContents().get(0);
		
		//UpperTimeBound:
		//    'within' value=INT unit=TimeUnit
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'within' value=INT unit=TimeUnit
		public Group getGroup() { return cGroup; }
		
		//'within'
		public Keyword getWithinKeyword_0() { return cWithinKeyword_0; }
		
		//value=INT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_1_0() { return cValueINTTerminalRuleCall_1_0; }
		
		//unit=TimeUnit
		public Assignment getUnitAssignment_2() { return cUnitAssignment_2; }
		
		//TimeUnit
		public RuleCall getUnitTimeUnitParserRuleCall_2_0() { return cUnitTimeUnitParserRuleCall_2_0; }
	}
	public class LowerTimeBoundElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.stlrobust.Spec.LowerTimeBound");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAfterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Assignment cUnitAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUnitTimeUnitParserRuleCall_2_0 = (RuleCall)cUnitAssignment_2.eContents().get(0);
		
		//LowerTimeBound:
		//    'after' value=INT unit=TimeUnit
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'after' value=INT unit=TimeUnit
		public Group getGroup() { return cGroup; }
		
		//'after'
		public Keyword getAfterKeyword_0() { return cAfterKeyword_0; }
		
		//value=INT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_1_0() { return cValueINTTerminalRuleCall_1_0; }
		
		//unit=TimeUnit
		public Assignment getUnitAssignment_2() { return cUnitAssignment_2; }
		
		//TimeUnit
		public RuleCall getUnitTimeUnitParserRuleCall_2_0() { return cUnitTimeUnitParserRuleCall_2_0; }
	}
	public class IntervalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.stlrobust.Spec.Interval");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBetweenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMinAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMinINTTerminalRuleCall_1_0 = (RuleCall)cMinAssignment_1.eContents().get(0);
		private final Keyword cAndKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMaxAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMaxINTTerminalRuleCall_3_0 = (RuleCall)cMaxAssignment_3.eContents().get(0);
		private final Assignment cUnitAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cUnitTimeUnitParserRuleCall_4_0 = (RuleCall)cUnitAssignment_4.eContents().get(0);
		
		//Interval:
		//    'between' min=INT 'and' max=INT unit=TimeUnit
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'between' min=INT 'and' max=INT unit=TimeUnit
		public Group getGroup() { return cGroup; }
		
		//'between'
		public Keyword getBetweenKeyword_0() { return cBetweenKeyword_0; }
		
		//min=INT
		public Assignment getMinAssignment_1() { return cMinAssignment_1; }
		
		//INT
		public RuleCall getMinINTTerminalRuleCall_1_0() { return cMinINTTerminalRuleCall_1_0; }
		
		//'and'
		public Keyword getAndKeyword_2() { return cAndKeyword_2; }
		
		//max=INT
		public Assignment getMaxAssignment_3() { return cMaxAssignment_3; }
		
		//INT
		public RuleCall getMaxINTTerminalRuleCall_3_0() { return cMaxINTTerminalRuleCall_3_0; }
		
		//unit=TimeUnit
		public Assignment getUnitAssignment_4() { return cUnitAssignment_4; }
		
		//TimeUnit
		public RuleCall getUnitTimeUnitParserRuleCall_4_0() { return cUnitTimeUnitParserRuleCall_4_0; }
	}
	public class TimeUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.stlrobust.Spec.TimeUnit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cMsKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cMinKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//TimeUnit:
		//    'ms' | 's' | 'min'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'ms' | 's' | 'min'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'ms'
		public Keyword getMsKeyword_0() { return cMsKeyword_0; }
		
		//'s'
		public Keyword getSKeyword_1() { return cSKeyword_1; }
		
		//'min'
		public Keyword getMinKeyword_2() { return cMinKeyword_2; }
	}
	
	
	private final ModelElements pModel;
	private final SignalElements pSignal;
	private final SpecificationElements pSpecification;
	private final ScopeElements pScope;
	private final PatternElements pPattern;
	private final UniversalityElements pUniversality;
	private final AbsenceElements pAbsence;
	private final ExistenceElements pExistence;
	private final MinimumDurationElements pMinimumDuration;
	private final MaximumDurationElements pMaximumDuration;
	private final RecurrenceElements pRecurrence;
	private final PrecedenceElements pPrecedence;
	private final UntilElements pUntil;
	private final ResponseElements pResponse;
	private final ResponseInvarianceElements pResponseInvariance;
	private final NumberElements pNumber;
	private final ExpressionElements pExpression;
	private final TimeElements pTime;
	private final UpperTimeBoundElements pUpperTimeBound;
	private final LowerTimeBoundElements pLowerTimeBound;
	private final IntervalElements pInterval;
	private final TimeUnitElements pTimeUnit;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SpecGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pSignal = new SignalElements();
		this.pSpecification = new SpecificationElements();
		this.pScope = new ScopeElements();
		this.pPattern = new PatternElements();
		this.pUniversality = new UniversalityElements();
		this.pAbsence = new AbsenceElements();
		this.pExistence = new ExistenceElements();
		this.pMinimumDuration = new MinimumDurationElements();
		this.pMaximumDuration = new MaximumDurationElements();
		this.pRecurrence = new RecurrenceElements();
		this.pPrecedence = new PrecedenceElements();
		this.pUntil = new UntilElements();
		this.pResponse = new ResponseElements();
		this.pResponseInvariance = new ResponseInvarianceElements();
		this.pNumber = new NumberElements();
		this.pExpression = new ExpressionElements();
		this.pTime = new TimeElements();
		this.pUpperTimeBound = new UpperTimeBoundElements();
		this.pLowerTimeBound = new LowerTimeBoundElements();
		this.pInterval = new IntervalElements();
		this.pTimeUnit = new TimeUnitElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.stlrobust.Spec".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//    Signals+=Signal*
	//    Specifications+=Specification*
	//;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Signal:
	//    'signal' name=ID 'from' queueName=STRING
	//;
	public SignalElements getSignalAccess() {
		return pSignal;
	}
	
	public ParserRule getSignalRule() {
		return getSignalAccess().getRule();
	}
	
	//Specification:
	//    'specification' name=ID ':'
	//    'scope' scope=Scope
	//    'pattern' pattern=Pattern
	//;
	public SpecificationElements getSpecificationAccess() {
		return pSpecification;
	}
	
	public ParserRule getSpecificationRule() {
		return getSpecificationAccess().getRule();
	}
	
	//Scope:
	//    {GlobalScope} 'Globally' |{BeforeScope} 'Before' r=Expression |{AfterScope} 'After' q=Expression |
	//    {BetweenScope} 'Between' q=Expression 'and' r=Expression |{AfterUntilScope} 'After' q=Expression 'until' r=Expression
	//;
	public ScopeElements getScopeAccess() {
		return pScope;
	}
	
	public ParserRule getScopeRule() {
		return getScopeAccess().getRule();
	}
	
	//Pattern:
	//    'Universality:' Universality |
	//    'Absence:' Absence |
	//    'Existence:' Existence |
	//    'MinimumDuration:' MinimumDuration |
	//    'MaximumDuration:' MaximumDuration |
	//    'Recurrence:' Recurrence |
	//    'Precedence:' Precedence |
	//    'Until:' Until |
	//    'Response:' Response |
	//    'ResponseInvariance:' ResponseInvariance
	//    //'PrecedenceChain1N:' PrecedenceChain1N |
	//    //'PrecedenceChainN1:' PrecedenceChainN1 |
	//    //'ResponseChain1N:' ResponseChain1N |
	//    //'ResponseChainN1:' ResponseChainN1 |
	//;
	public PatternElements getPatternAccess() {
		return pPattern;
	}
	
	public ParserRule getPatternRule() {
		return getPatternAccess().getRule();
	}
	
	//Universality:
	//    "it-is-always-the-case-that" p=Expression 'holds'?
	//;
	public UniversalityElements getUniversalityAccess() {
		return pUniversality;
	}
	
	public ParserRule getUniversalityRule() {
		return getUniversalityAccess().getRule();
	}
	
	//Absence:
	//    "It-is-never-the-case-that" p=Expression 'holds'?
	//;
	public AbsenceElements getAbsenceAccess() {
		return pAbsence;
	}
	
	public ParserRule getAbsenceRule() {
		return getAbsenceAccess().getRule();
	}
	
	//Existence:
	//    "Eventually" p=Expression 'holds'? time=Time
	//;
	public ExistenceElements getExistenceAccess() {
		return pExistence;
	}
	
	public ParserRule getExistenceRule() {
		return getExistenceAccess().getRule();
	}
	
	//MinimumDuration:
	//    "a"
	//;
	public MinimumDurationElements getMinimumDurationAccess() {
		return pMinimumDuration;
	}
	
	public ParserRule getMinimumDurationRule() {
		return getMinimumDurationAccess().getRule();
	}
	
	//MaximumDuration:
	//    "a"
	//;
	public MaximumDurationElements getMaximumDurationAccess() {
		return pMaximumDuration;
	}
	
	public ParserRule getMaximumDurationRule() {
		return getMaximumDurationAccess().getRule();
	}
	
	//Recurrence:
	//    "a"
	//;
	public RecurrenceElements getRecurrenceAccess() {
		return pRecurrence;
	}
	
	public ParserRule getRecurrenceRule() {
		return getRecurrenceAccess().getRule();
	}
	
	//Precedence:
	//    "a"
	//;
	public PrecedenceElements getPrecedenceAccess() {
		return pPrecedence;
	}
	
	public ParserRule getPrecedenceRule() {
		return getPrecedenceAccess().getRule();
	}
	
	//Until:
	//    "a"
	//;
	public UntilElements getUntilAccess() {
		return pUntil;
	}
	
	public ParserRule getUntilRule() {
		return getUntilAccess().getRule();
	}
	
	//Response:
	//    "if" p=Expression "then-in-response" s=Expression ('eventually holds')? time=Time
	//;
	public ResponseElements getResponseAccess() {
		return pResponse;
	}
	
	public ParserRule getResponseRule() {
		return getResponseAccess().getRule();
	}
	
	//ResponseInvariance:
	//    "a"
	//;
	public ResponseInvarianceElements getResponseInvarianceAccess() {
		return pResponseInvariance;
	}
	
	public ParserRule getResponseInvarianceRule() {
		return getResponseInvarianceAccess().getRule();
	}
	
	//Number:
	//    sign=('-')? intValue=INT ('.' decimalValue=INT)?
	//;
	public NumberElements getNumberAccess() {
		return pNumber;
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	//Expression:
	//    (s1=[Signal] | f1=Number) operator=('>' | '>=' | '=' | '<' | '<=') (s2=[Signal] | f2=Number)
	//;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Time:
	//    UpperTimeBound | LowerTimeBound | Interval
	//;
	public TimeElements getTimeAccess() {
		return pTime;
	}
	
	public ParserRule getTimeRule() {
		return getTimeAccess().getRule();
	}
	
	//UpperTimeBound:
	//    'within' value=INT unit=TimeUnit
	//;
	public UpperTimeBoundElements getUpperTimeBoundAccess() {
		return pUpperTimeBound;
	}
	
	public ParserRule getUpperTimeBoundRule() {
		return getUpperTimeBoundAccess().getRule();
	}
	
	//LowerTimeBound:
	//    'after' value=INT unit=TimeUnit
	//;
	public LowerTimeBoundElements getLowerTimeBoundAccess() {
		return pLowerTimeBound;
	}
	
	public ParserRule getLowerTimeBoundRule() {
		return getLowerTimeBoundAccess().getRule();
	}
	
	//Interval:
	//    'between' min=INT 'and' max=INT unit=TimeUnit
	//;
	public IntervalElements getIntervalAccess() {
		return pInterval;
	}
	
	public ParserRule getIntervalRule() {
		return getIntervalAccess().getRule();
	}
	
	//TimeUnit:
	//    'ms' | 's' | 'min'
	//;
	public TimeUnitElements getTimeUnitAccess() {
		return pTimeUnit;
	}
	
	public ParserRule getTimeUnitRule() {
		return getTimeUnitAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
