/**
 * generated by Xtext 2.37.0
 */
package org.xtext.stlrobust.spec.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.stlrobust.spec.Expression;
import org.xtext.stlrobust.spec.Signal;
import org.xtext.stlrobust.spec.SpecPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Expression</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.stlrobust.spec.impl.ExpressionImpl#getS1 <em>S1</em>}</li>
 *   <li>{@link org.xtext.stlrobust.spec.impl.ExpressionImpl#getF1 <em>F1</em>}</li>
 *   <li>{@link org.xtext.stlrobust.spec.impl.ExpressionImpl#getOperator <em>Operator</em>}</li>
 *   <li>{@link org.xtext.stlrobust.spec.impl.ExpressionImpl#getS2 <em>S2</em>}</li>
 *   <li>{@link org.xtext.stlrobust.spec.impl.ExpressionImpl#getF2 <em>F2</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ExpressionImpl extends MinimalEObjectImpl.Container implements Expression
{
  /**
   * The cached value of the '{@link #getS1() <em>S1</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getS1()
   * @generated
   * @ordered
   */
  protected Signal s1;

  /**
   * The cached value of the '{@link #getF1() <em>F1</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getF1()
   * @generated
   * @ordered
   */
  protected org.xtext.stlrobust.spec.Number f1;

  /**
   * The default value of the '{@link #getOperator() <em>Operator</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperator()
   * @generated
   * @ordered
   */
  protected static final String OPERATOR_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getOperator() <em>Operator</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperator()
   * @generated
   * @ordered
   */
  protected String operator = OPERATOR_EDEFAULT;

  /**
   * The cached value of the '{@link #getS2() <em>S2</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getS2()
   * @generated
   * @ordered
   */
  protected Signal s2;

  /**
   * The cached value of the '{@link #getF2() <em>F2</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getF2()
   * @generated
   * @ordered
   */
  protected org.xtext.stlrobust.spec.Number f2;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExpressionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SpecPackage.Literals.EXPRESSION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Signal getS1()
  {
    if (s1 != null && s1.eIsProxy())
    {
      InternalEObject oldS1 = (InternalEObject)s1;
      s1 = (Signal)eResolveProxy(oldS1);
      if (s1 != oldS1)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, SpecPackage.EXPRESSION__S1, oldS1, s1));
      }
    }
    return s1;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Signal basicGetS1()
  {
    return s1;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setS1(Signal newS1)
  {
    Signal oldS1 = s1;
    s1 = newS1;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SpecPackage.EXPRESSION__S1, oldS1, s1));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public org.xtext.stlrobust.spec.Number getF1()
  {
    return f1;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetF1(org.xtext.stlrobust.spec.Number newF1, NotificationChain msgs)
  {
    org.xtext.stlrobust.spec.Number oldF1 = f1;
    f1 = newF1;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SpecPackage.EXPRESSION__F1, oldF1, newF1);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setF1(org.xtext.stlrobust.spec.Number newF1)
  {
    if (newF1 != f1)
    {
      NotificationChain msgs = null;
      if (f1 != null)
        msgs = ((InternalEObject)f1).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SpecPackage.EXPRESSION__F1, null, msgs);
      if (newF1 != null)
        msgs = ((InternalEObject)newF1).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SpecPackage.EXPRESSION__F1, null, msgs);
      msgs = basicSetF1(newF1, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SpecPackage.EXPRESSION__F1, newF1, newF1));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getOperator()
  {
    return operator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOperator(String newOperator)
  {
    String oldOperator = operator;
    operator = newOperator;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SpecPackage.EXPRESSION__OPERATOR, oldOperator, operator));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Signal getS2()
  {
    if (s2 != null && s2.eIsProxy())
    {
      InternalEObject oldS2 = (InternalEObject)s2;
      s2 = (Signal)eResolveProxy(oldS2);
      if (s2 != oldS2)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, SpecPackage.EXPRESSION__S2, oldS2, s2));
      }
    }
    return s2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Signal basicGetS2()
  {
    return s2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setS2(Signal newS2)
  {
    Signal oldS2 = s2;
    s2 = newS2;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SpecPackage.EXPRESSION__S2, oldS2, s2));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public org.xtext.stlrobust.spec.Number getF2()
  {
    return f2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetF2(org.xtext.stlrobust.spec.Number newF2, NotificationChain msgs)
  {
    org.xtext.stlrobust.spec.Number oldF2 = f2;
    f2 = newF2;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SpecPackage.EXPRESSION__F2, oldF2, newF2);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setF2(org.xtext.stlrobust.spec.Number newF2)
  {
    if (newF2 != f2)
    {
      NotificationChain msgs = null;
      if (f2 != null)
        msgs = ((InternalEObject)f2).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SpecPackage.EXPRESSION__F2, null, msgs);
      if (newF2 != null)
        msgs = ((InternalEObject)newF2).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SpecPackage.EXPRESSION__F2, null, msgs);
      msgs = basicSetF2(newF2, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SpecPackage.EXPRESSION__F2, newF2, newF2));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SpecPackage.EXPRESSION__F1:
        return basicSetF1(null, msgs);
      case SpecPackage.EXPRESSION__F2:
        return basicSetF2(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SpecPackage.EXPRESSION__S1:
        if (resolve) return getS1();
        return basicGetS1();
      case SpecPackage.EXPRESSION__F1:
        return getF1();
      case SpecPackage.EXPRESSION__OPERATOR:
        return getOperator();
      case SpecPackage.EXPRESSION__S2:
        if (resolve) return getS2();
        return basicGetS2();
      case SpecPackage.EXPRESSION__F2:
        return getF2();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SpecPackage.EXPRESSION__S1:
        setS1((Signal)newValue);
        return;
      case SpecPackage.EXPRESSION__F1:
        setF1((org.xtext.stlrobust.spec.Number)newValue);
        return;
      case SpecPackage.EXPRESSION__OPERATOR:
        setOperator((String)newValue);
        return;
      case SpecPackage.EXPRESSION__S2:
        setS2((Signal)newValue);
        return;
      case SpecPackage.EXPRESSION__F2:
        setF2((org.xtext.stlrobust.spec.Number)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SpecPackage.EXPRESSION__S1:
        setS1((Signal)null);
        return;
      case SpecPackage.EXPRESSION__F1:
        setF1((org.xtext.stlrobust.spec.Number)null);
        return;
      case SpecPackage.EXPRESSION__OPERATOR:
        setOperator(OPERATOR_EDEFAULT);
        return;
      case SpecPackage.EXPRESSION__S2:
        setS2((Signal)null);
        return;
      case SpecPackage.EXPRESSION__F2:
        setF2((org.xtext.stlrobust.spec.Number)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SpecPackage.EXPRESSION__S1:
        return s1 != null;
      case SpecPackage.EXPRESSION__F1:
        return f1 != null;
      case SpecPackage.EXPRESSION__OPERATOR:
        return OPERATOR_EDEFAULT == null ? operator != null : !OPERATOR_EDEFAULT.equals(operator);
      case SpecPackage.EXPRESSION__S2:
        return s2 != null;
      case SpecPackage.EXPRESSION__F2:
        return f2 != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (operator: ");
    result.append(operator);
    result.append(')');
    return result.toString();
  }

} //ExpressionImpl
