/**
 * generated by Xtext 2.37.0
 */
package org.xtext.stlrobust.spec.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.stlrobust.spec.Absence;
import org.xtext.stlrobust.spec.AfterScope;
import org.xtext.stlrobust.spec.AfterUntilScope;
import org.xtext.stlrobust.spec.BeforeScope;
import org.xtext.stlrobust.spec.BetweenScope;
import org.xtext.stlrobust.spec.Existence;
import org.xtext.stlrobust.spec.Expression;
import org.xtext.stlrobust.spec.GlobalScope;
import org.xtext.stlrobust.spec.Interval;
import org.xtext.stlrobust.spec.LowerTimeBound;
import org.xtext.stlrobust.spec.Model;
import org.xtext.stlrobust.spec.Pattern;
import org.xtext.stlrobust.spec.Response;
import org.xtext.stlrobust.spec.Scope;
import org.xtext.stlrobust.spec.Signal;
import org.xtext.stlrobust.spec.SpecFactory;
import org.xtext.stlrobust.spec.SpecPackage;
import org.xtext.stlrobust.spec.Specification;
import org.xtext.stlrobust.spec.Time;
import org.xtext.stlrobust.spec.Universality;
import org.xtext.stlrobust.spec.UpperTimeBound;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class SpecFactoryImpl extends EFactoryImpl implements SpecFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static SpecFactory init()
  {
    try
    {
      SpecFactory theSpecFactory = (SpecFactory)EPackage.Registry.INSTANCE.getEFactory(SpecPackage.eNS_URI);
      if (theSpecFactory != null)
      {
        return theSpecFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new SpecFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SpecFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case SpecPackage.MODEL: return createModel();
      case SpecPackage.SIGNAL: return createSignal();
      case SpecPackage.SPECIFICATION: return createSpecification();
      case SpecPackage.SCOPE: return createScope();
      case SpecPackage.PATTERN: return createPattern();
      case SpecPackage.UNIVERSALITY: return createUniversality();
      case SpecPackage.ABSENCE: return createAbsence();
      case SpecPackage.EXISTENCE: return createExistence();
      case SpecPackage.RESPONSE: return createResponse();
      case SpecPackage.NUMBER: return createNumber();
      case SpecPackage.EXPRESSION: return createExpression();
      case SpecPackage.TIME: return createTime();
      case SpecPackage.UPPER_TIME_BOUND: return createUpperTimeBound();
      case SpecPackage.LOWER_TIME_BOUND: return createLowerTimeBound();
      case SpecPackage.INTERVAL: return createInterval();
      case SpecPackage.GLOBAL_SCOPE: return createGlobalScope();
      case SpecPackage.BEFORE_SCOPE: return createBeforeScope();
      case SpecPackage.AFTER_SCOPE: return createAfterScope();
      case SpecPackage.BETWEEN_SCOPE: return createBetweenScope();
      case SpecPackage.AFTER_UNTIL_SCOPE: return createAfterUntilScope();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Signal createSignal()
  {
    SignalImpl signal = new SignalImpl();
    return signal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Specification createSpecification()
  {
    SpecificationImpl specification = new SpecificationImpl();
    return specification;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Scope createScope()
  {
    ScopeImpl scope = new ScopeImpl();
    return scope;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Pattern createPattern()
  {
    PatternImpl pattern = new PatternImpl();
    return pattern;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Universality createUniversality()
  {
    UniversalityImpl universality = new UniversalityImpl();
    return universality;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Absence createAbsence()
  {
    AbsenceImpl absence = new AbsenceImpl();
    return absence;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Existence createExistence()
  {
    ExistenceImpl existence = new ExistenceImpl();
    return existence;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Response createResponse()
  {
    ResponseImpl response = new ResponseImpl();
    return response;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public org.xtext.stlrobust.spec.Number createNumber()
  {
    NumberImpl number = new NumberImpl();
    return number;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression createExpression()
  {
    ExpressionImpl expression = new ExpressionImpl();
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Time createTime()
  {
    TimeImpl time = new TimeImpl();
    return time;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UpperTimeBound createUpperTimeBound()
  {
    UpperTimeBoundImpl upperTimeBound = new UpperTimeBoundImpl();
    return upperTimeBound;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LowerTimeBound createLowerTimeBound()
  {
    LowerTimeBoundImpl lowerTimeBound = new LowerTimeBoundImpl();
    return lowerTimeBound;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Interval createInterval()
  {
    IntervalImpl interval = new IntervalImpl();
    return interval;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GlobalScope createGlobalScope()
  {
    GlobalScopeImpl globalScope = new GlobalScopeImpl();
    return globalScope;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BeforeScope createBeforeScope()
  {
    BeforeScopeImpl beforeScope = new BeforeScopeImpl();
    return beforeScope;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AfterScope createAfterScope()
  {
    AfterScopeImpl afterScope = new AfterScopeImpl();
    return afterScope;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BetweenScope createBetweenScope()
  {
    BetweenScopeImpl betweenScope = new BetweenScopeImpl();
    return betweenScope;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AfterUntilScope createAfterUntilScope()
  {
    AfterUntilScopeImpl afterUntilScope = new AfterUntilScopeImpl();
    return afterUntilScope;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SpecPackage getSpecPackage()
  {
    return (SpecPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static SpecPackage getPackage()
  {
    return SpecPackage.eINSTANCE;
  }

} //SpecFactoryImpl
