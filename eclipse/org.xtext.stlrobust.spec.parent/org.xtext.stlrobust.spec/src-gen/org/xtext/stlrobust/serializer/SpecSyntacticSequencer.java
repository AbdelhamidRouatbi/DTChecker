/*
 * generated by Xtext 2.37.0
 */
package org.xtext.stlrobust.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.stlrobust.services.SpecGrammarAccess;

@SuppressWarnings("all")
public class SpecSyntacticSequencer extends AbstractSyntacticSequencer {

	protected SpecGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Absence_HoldsKeyword_2_q;
	protected AbstractElementAlias match_Existence_HoldsKeyword_2_q;
	protected AbstractElementAlias match_Pattern___MaximumDurationKeyword_4_0_MaximumDurationParserRuleCall_4_1___or___MinimumDurationKeyword_3_0_MinimumDurationParserRuleCall_3_1___or___PrecedenceKeyword_6_0_PrecedenceParserRuleCall_6_1___or___RecurrenceKeyword_5_0_RecurrenceParserRuleCall_5_1___or___ResponseInvarianceKeyword_9_0_ResponseInvarianceParserRuleCall_9_1___or___UntilKeyword_7_0_UntilParserRuleCall_7_1__;
	protected AbstractElementAlias match_Response_EventuallyHoldsKeyword_4_q;
	protected AbstractElementAlias match_Universality_HoldsKeyword_2_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (SpecGrammarAccess) access;
		match_Absence_HoldsKeyword_2_q = new TokenAlias(false, true, grammarAccess.getAbsenceAccess().getHoldsKeyword_2());
		match_Existence_HoldsKeyword_2_q = new TokenAlias(false, true, grammarAccess.getExistenceAccess().getHoldsKeyword_2());
		match_Pattern___MaximumDurationKeyword_4_0_MaximumDurationParserRuleCall_4_1___or___MinimumDurationKeyword_3_0_MinimumDurationParserRuleCall_3_1___or___PrecedenceKeyword_6_0_PrecedenceParserRuleCall_6_1___or___RecurrenceKeyword_5_0_RecurrenceParserRuleCall_5_1___or___ResponseInvarianceKeyword_9_0_ResponseInvarianceParserRuleCall_9_1___or___UntilKeyword_7_0_UntilParserRuleCall_7_1__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getPatternAccess().getMaximumDurationKeyword_4_0()), new TokenAlias(false, false, grammarAccess.getPatternAccess().getMaximumDurationParserRuleCall_4_1())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getPatternAccess().getMinimumDurationKeyword_3_0()), new TokenAlias(false, false, grammarAccess.getPatternAccess().getMinimumDurationParserRuleCall_3_1())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getPatternAccess().getPrecedenceKeyword_6_0()), new TokenAlias(false, false, grammarAccess.getPatternAccess().getPrecedenceParserRuleCall_6_1())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getPatternAccess().getRecurrenceKeyword_5_0()), new TokenAlias(false, false, grammarAccess.getPatternAccess().getRecurrenceParserRuleCall_5_1())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getPatternAccess().getResponseInvarianceKeyword_9_0()), new TokenAlias(false, false, grammarAccess.getPatternAccess().getResponseInvarianceParserRuleCall_9_1())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getPatternAccess().getUntilKeyword_7_0()), new TokenAlias(false, false, grammarAccess.getPatternAccess().getUntilParserRuleCall_7_1())));
		match_Response_EventuallyHoldsKeyword_4_q = new TokenAlias(false, true, grammarAccess.getResponseAccess().getEventuallyHoldsKeyword_4());
		match_Universality_HoldsKeyword_2_q = new TokenAlias(false, true, grammarAccess.getUniversalityAccess().getHoldsKeyword_2());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getMaximumDurationRule())
			return getMaximumDurationToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getMinimumDurationRule())
			return getMinimumDurationToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getPrecedenceRule())
			return getPrecedenceToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getRecurrenceRule())
			return getRecurrenceToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getResponseInvarianceRule())
			return getResponseInvarianceToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getUntilRule())
			return getUntilToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * MaximumDuration:
	 * 	"a"
	 * ;
	 */
	protected String getMaximumDurationToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "a";
	}
	
	/**
	 * MinimumDuration:
	 * 	"a"
	 * ;
	 */
	protected String getMinimumDurationToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "a";
	}
	
	/**
	 * Precedence:
	 * 	"a"
	 * ;
	 */
	protected String getPrecedenceToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "a";
	}
	
	/**
	 * Recurrence:
	 * 	"a"
	 * ;
	 */
	protected String getRecurrenceToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "a";
	}
	
	/**
	 * ResponseInvariance:
	 * 	"a"
	 * ;
	 */
	protected String getResponseInvarianceToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "a";
	}
	
	/**
	 * Until:
	 * 	"a"
	 * ;
	 */
	protected String getUntilToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "a";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Absence_HoldsKeyword_2_q.equals(syntax))
				emit_Absence_HoldsKeyword_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Existence_HoldsKeyword_2_q.equals(syntax))
				emit_Existence_HoldsKeyword_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Pattern___MaximumDurationKeyword_4_0_MaximumDurationParserRuleCall_4_1___or___MinimumDurationKeyword_3_0_MinimumDurationParserRuleCall_3_1___or___PrecedenceKeyword_6_0_PrecedenceParserRuleCall_6_1___or___RecurrenceKeyword_5_0_RecurrenceParserRuleCall_5_1___or___ResponseInvarianceKeyword_9_0_ResponseInvarianceParserRuleCall_9_1___or___UntilKeyword_7_0_UntilParserRuleCall_7_1__.equals(syntax))
				emit_Pattern___MaximumDurationKeyword_4_0_MaximumDurationParserRuleCall_4_1___or___MinimumDurationKeyword_3_0_MinimumDurationParserRuleCall_3_1___or___PrecedenceKeyword_6_0_PrecedenceParserRuleCall_6_1___or___RecurrenceKeyword_5_0_RecurrenceParserRuleCall_5_1___or___ResponseInvarianceKeyword_9_0_ResponseInvarianceParserRuleCall_9_1___or___UntilKeyword_7_0_UntilParserRuleCall_7_1__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Response_EventuallyHoldsKeyword_4_q.equals(syntax))
				emit_Response_EventuallyHoldsKeyword_4_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Universality_HoldsKeyword_2_q.equals(syntax))
				emit_Universality_HoldsKeyword_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'holds'?
	 *
	 * This ambiguous syntax occurs at:
	 *     p=Expression (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_Absence_HoldsKeyword_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'holds'?
	 *
	 * This ambiguous syntax occurs at:
	 *     p=Expression (ambiguity) time=Time
	 
	 * </pre>
	 */
	protected void emit_Existence_HoldsKeyword_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (
	  *         ('MinimumDuration:' MinimumDuration) | 
	  *         ('MaximumDuration:' MaximumDuration) | 
	  *         ('Recurrence:' Recurrence) | 
	  *         ('Precedence:' Precedence) | 
	  *         ('Until:' Until) | 
	  *         ('ResponseInvariance:' ResponseInvariance)
	  *     )
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 
	 * </pre>
	 */
	protected void emit_Pattern___MaximumDurationKeyword_4_0_MaximumDurationParserRuleCall_4_1___or___MinimumDurationKeyword_3_0_MinimumDurationParserRuleCall_3_1___or___PrecedenceKeyword_6_0_PrecedenceParserRuleCall_6_1___or___RecurrenceKeyword_5_0_RecurrenceParserRuleCall_5_1___or___ResponseInvarianceKeyword_9_0_ResponseInvarianceParserRuleCall_9_1___or___UntilKeyword_7_0_UntilParserRuleCall_7_1__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'eventually holds'?
	 *
	 * This ambiguous syntax occurs at:
	 *     s=Expression (ambiguity) time=Time
	 
	 * </pre>
	 */
	protected void emit_Response_EventuallyHoldsKeyword_4_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'holds'?
	 *
	 * This ambiguous syntax occurs at:
	 *     p=Expression (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_Universality_HoldsKeyword_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
