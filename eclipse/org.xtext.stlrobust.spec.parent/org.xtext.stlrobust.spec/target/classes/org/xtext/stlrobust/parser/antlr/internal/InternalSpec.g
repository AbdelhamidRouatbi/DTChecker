/*
 * generated by Xtext 2.37.0
 */
grammar InternalSpec;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.stlrobust.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.stlrobust.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.stlrobust.services.SpecGrammarAccess;

}

@parser::members {

 	private SpecGrammarAccess grammarAccess;

    public InternalSpecParser(TokenStream input, SpecGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected SpecGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getSignalsSignalParserRuleCall_0_0());
				}
				lv_Signals_0_0=ruleSignal
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"Signals",
						lv_Signals_0_0,
						"org.xtext.stlrobust.Spec.Signal");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getSpecificationsSpecificationParserRuleCall_1_0());
				}
				lv_Specifications_1_0=ruleSpecification
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"Specifications",
						lv_Specifications_1_0,
						"org.xtext.stlrobust.Spec.Specification");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleSignal
entryRuleSignal returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSignalRule()); }
	iv_ruleSignal=ruleSignal
	{ $current=$iv_ruleSignal.current; }
	EOF;

// Rule Signal
ruleSignal returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='signal'
		{
			newLeafNode(otherlv_0, grammarAccess.getSignalAccess().getSignalKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getSignalAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSignalRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='from'
		{
			newLeafNode(otherlv_2, grammarAccess.getSignalAccess().getFromKeyword_2());
		}
		(
			(
				lv_queueName_3_0=RULE_STRING
				{
					newLeafNode(lv_queueName_3_0, grammarAccess.getSignalAccess().getQueueNameSTRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSignalRule());
					}
					setWithLastConsumed(
						$current,
						"queueName",
						lv_queueName_3_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleSpecification
entryRuleSpecification returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSpecificationRule()); }
	iv_ruleSpecification=ruleSpecification
	{ $current=$iv_ruleSpecification.current; }
	EOF;

// Rule Specification
ruleSpecification returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='specification'
		{
			newLeafNode(otherlv_0, grammarAccess.getSpecificationAccess().getSpecificationKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getSpecificationAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSpecificationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getSpecificationAccess().getColonKeyword_2());
		}
		otherlv_3='scope'
		{
			newLeafNode(otherlv_3, grammarAccess.getSpecificationAccess().getScopeKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSpecificationAccess().getScopeScopeParserRuleCall_4_0());
				}
				lv_scope_4_0=ruleScope
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSpecificationRule());
					}
					set(
						$current,
						"scope",
						lv_scope_4_0,
						"org.xtext.stlrobust.Spec.Scope");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5='pattern'
		{
			newLeafNode(otherlv_5, grammarAccess.getSpecificationAccess().getPatternKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSpecificationAccess().getPatternPatternParserRuleCall_6_0());
				}
				lv_pattern_6_0=rulePattern
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSpecificationRule());
					}
					set(
						$current,
						"pattern",
						lv_pattern_6_0,
						"org.xtext.stlrobust.Spec.Pattern");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleScope
entryRuleScope returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getScopeRule()); }
	iv_ruleScope=ruleScope
	{ $current=$iv_ruleScope.current; }
	EOF;

// Rule Scope
ruleScope returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getScopeAccess().getGlobalScopeAction_0_0(),
						$current);
				}
			)
			otherlv_1='Globally'
			{
				newLeafNode(otherlv_1, grammarAccess.getScopeAccess().getGloballyKeyword_0_1());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getScopeAccess().getBeforeScopeAction_1_0(),
						$current);
				}
			)
			otherlv_3='Before'
			{
				newLeafNode(otherlv_3, grammarAccess.getScopeAccess().getBeforeKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getScopeAccess().getRExpressionParserRuleCall_1_2_0());
					}
					lv_r_4_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getScopeRule());
						}
						set(
							$current,
							"r",
							lv_r_4_0,
							"org.xtext.stlrobust.Spec.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getScopeAccess().getAfterScopeAction_2_0(),
						$current);
				}
			)
			otherlv_6='After'
			{
				newLeafNode(otherlv_6, grammarAccess.getScopeAccess().getAfterKeyword_2_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getScopeAccess().getQExpressionParserRuleCall_2_2_0());
					}
					lv_q_7_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getScopeRule());
						}
						set(
							$current,
							"q",
							lv_q_7_0,
							"org.xtext.stlrobust.Spec.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getScopeAccess().getBetweenScopeAction_3_0(),
						$current);
				}
			)
			otherlv_9='Between'
			{
				newLeafNode(otherlv_9, grammarAccess.getScopeAccess().getBetweenKeyword_3_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getScopeAccess().getQExpressionParserRuleCall_3_2_0());
					}
					lv_q_10_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getScopeRule());
						}
						set(
							$current,
							"q",
							lv_q_10_0,
							"org.xtext.stlrobust.Spec.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_11='and'
			{
				newLeafNode(otherlv_11, grammarAccess.getScopeAccess().getAndKeyword_3_3());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getScopeAccess().getRExpressionParserRuleCall_3_4_0());
					}
					lv_r_12_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getScopeRule());
						}
						set(
							$current,
							"r",
							lv_r_12_0,
							"org.xtext.stlrobust.Spec.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getScopeAccess().getAfterUntilScopeAction_4_0(),
						$current);
				}
			)
			otherlv_14='After'
			{
				newLeafNode(otherlv_14, grammarAccess.getScopeAccess().getAfterKeyword_4_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getScopeAccess().getQExpressionParserRuleCall_4_2_0());
					}
					lv_q_15_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getScopeRule());
						}
						set(
							$current,
							"q",
							lv_q_15_0,
							"org.xtext.stlrobust.Spec.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_16='until'
			{
				newLeafNode(otherlv_16, grammarAccess.getScopeAccess().getUntilKeyword_4_3());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getScopeAccess().getRExpressionParserRuleCall_4_4_0());
					}
					lv_r_17_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getScopeRule());
						}
						set(
							$current,
							"r",
							lv_r_17_0,
							"org.xtext.stlrobust.Spec.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRulePattern
entryRulePattern returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPatternRule()); }
	iv_rulePattern=rulePattern
	{ $current=$iv_rulePattern.current; }
	EOF;

// Rule Pattern
rulePattern returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='Universality:'
			{
				newLeafNode(otherlv_0, grammarAccess.getPatternAccess().getUniversalityKeyword_0_0());
			}
			{
				newCompositeNode(grammarAccess.getPatternAccess().getUniversalityParserRuleCall_0_1());
			}
			this_Universality_1=ruleUniversality
			{
				$current = $this_Universality_1.current;
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			otherlv_2='Absence:'
			{
				newLeafNode(otherlv_2, grammarAccess.getPatternAccess().getAbsenceKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getPatternAccess().getAbsenceParserRuleCall_1_1());
			}
			this_Absence_3=ruleAbsence
			{
				$current = $this_Absence_3.current;
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			otherlv_4='Existence:'
			{
				newLeafNode(otherlv_4, grammarAccess.getPatternAccess().getExistenceKeyword_2_0());
			}
			{
				newCompositeNode(grammarAccess.getPatternAccess().getExistenceParserRuleCall_2_1());
			}
			this_Existence_5=ruleExistence
			{
				$current = $this_Existence_5.current;
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			otherlv_6='MinimumDuration:'
			{
				newLeafNode(otherlv_6, grammarAccess.getPatternAccess().getMinimumDurationKeyword_3_0());
			}
			{
				newCompositeNode(grammarAccess.getPatternAccess().getMinimumDurationParserRuleCall_3_1());
			}
			ruleMinimumDuration
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			otherlv_8='MaximumDuration:'
			{
				newLeafNode(otherlv_8, grammarAccess.getPatternAccess().getMaximumDurationKeyword_4_0());
			}
			{
				newCompositeNode(grammarAccess.getPatternAccess().getMaximumDurationParserRuleCall_4_1());
			}
			ruleMaximumDuration
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			otherlv_10='Recurrence:'
			{
				newLeafNode(otherlv_10, grammarAccess.getPatternAccess().getRecurrenceKeyword_5_0());
			}
			{
				newCompositeNode(grammarAccess.getPatternAccess().getRecurrenceParserRuleCall_5_1());
			}
			ruleRecurrence
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			otherlv_12='Precedence:'
			{
				newLeafNode(otherlv_12, grammarAccess.getPatternAccess().getPrecedenceKeyword_6_0());
			}
			{
				newCompositeNode(grammarAccess.getPatternAccess().getPrecedenceParserRuleCall_6_1());
			}
			rulePrecedence
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			otherlv_14='Until:'
			{
				newLeafNode(otherlv_14, grammarAccess.getPatternAccess().getUntilKeyword_7_0());
			}
			{
				newCompositeNode(grammarAccess.getPatternAccess().getUntilParserRuleCall_7_1());
			}
			ruleUntil
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			otherlv_16='Response:'
			{
				newLeafNode(otherlv_16, grammarAccess.getPatternAccess().getResponseKeyword_8_0());
			}
			{
				newCompositeNode(grammarAccess.getPatternAccess().getResponseParserRuleCall_8_1());
			}
			this_Response_17=ruleResponse
			{
				$current = $this_Response_17.current;
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			otherlv_18='ResponseInvariance:'
			{
				newLeafNode(otherlv_18, grammarAccess.getPatternAccess().getResponseInvarianceKeyword_9_0());
			}
			{
				newCompositeNode(grammarAccess.getPatternAccess().getResponseInvarianceParserRuleCall_9_1());
			}
			ruleResponseInvariance
			{
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleUniversality
entryRuleUniversality returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUniversalityRule()); }
	iv_ruleUniversality=ruleUniversality
	{ $current=$iv_ruleUniversality.current; }
	EOF;

// Rule Universality
ruleUniversality returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='it-is-always-the-case-that'
		{
			newLeafNode(otherlv_0, grammarAccess.getUniversalityAccess().getItIsAlwaysTheCaseThatKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getUniversalityAccess().getPExpressionParserRuleCall_1_0());
				}
				lv_p_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUniversalityRule());
					}
					set(
						$current,
						"p",
						lv_p_1_0,
						"org.xtext.stlrobust.Spec.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2='holds'
			{
				newLeafNode(otherlv_2, grammarAccess.getUniversalityAccess().getHoldsKeyword_2());
			}
		)?
	)
;

// Entry rule entryRuleAbsence
entryRuleAbsence returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAbsenceRule()); }
	iv_ruleAbsence=ruleAbsence
	{ $current=$iv_ruleAbsence.current; }
	EOF;

// Rule Absence
ruleAbsence returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='It-is-never-the-case-that'
		{
			newLeafNode(otherlv_0, grammarAccess.getAbsenceAccess().getItIsNeverTheCaseThatKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAbsenceAccess().getPExpressionParserRuleCall_1_0());
				}
				lv_p_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAbsenceRule());
					}
					set(
						$current,
						"p",
						lv_p_1_0,
						"org.xtext.stlrobust.Spec.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2='holds'
			{
				newLeafNode(otherlv_2, grammarAccess.getAbsenceAccess().getHoldsKeyword_2());
			}
		)?
	)
;

// Entry rule entryRuleExistence
entryRuleExistence returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExistenceRule()); }
	iv_ruleExistence=ruleExistence
	{ $current=$iv_ruleExistence.current; }
	EOF;

// Rule Existence
ruleExistence returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Eventually'
		{
			newLeafNode(otherlv_0, grammarAccess.getExistenceAccess().getEventuallyKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExistenceAccess().getPExpressionParserRuleCall_1_0());
				}
				lv_p_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExistenceRule());
					}
					set(
						$current,
						"p",
						lv_p_1_0,
						"org.xtext.stlrobust.Spec.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2='holds'
			{
				newLeafNode(otherlv_2, grammarAccess.getExistenceAccess().getHoldsKeyword_2());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getExistenceAccess().getTimeTimeParserRuleCall_3_0());
				}
				lv_time_3_0=ruleTime
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExistenceRule());
					}
					set(
						$current,
						"time",
						lv_time_3_0,
						"org.xtext.stlrobust.Spec.Time");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleMinimumDuration
entryRuleMinimumDuration returns [String current=null]:
	{ newCompositeNode(grammarAccess.getMinimumDurationRule()); }
	iv_ruleMinimumDuration=ruleMinimumDuration
	{ $current=$iv_ruleMinimumDuration.current.getText(); }
	EOF;

// Rule MinimumDuration
ruleMinimumDuration returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='a'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getMinimumDurationAccess().getAKeyword());
	}
;

// Entry rule entryRuleMaximumDuration
entryRuleMaximumDuration returns [String current=null]:
	{ newCompositeNode(grammarAccess.getMaximumDurationRule()); }
	iv_ruleMaximumDuration=ruleMaximumDuration
	{ $current=$iv_ruleMaximumDuration.current.getText(); }
	EOF;

// Rule MaximumDuration
ruleMaximumDuration returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='a'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getMaximumDurationAccess().getAKeyword());
	}
;

// Entry rule entryRuleRecurrence
entryRuleRecurrence returns [String current=null]:
	{ newCompositeNode(grammarAccess.getRecurrenceRule()); }
	iv_ruleRecurrence=ruleRecurrence
	{ $current=$iv_ruleRecurrence.current.getText(); }
	EOF;

// Rule Recurrence
ruleRecurrence returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='a'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getRecurrenceAccess().getAKeyword());
	}
;

// Entry rule entryRulePrecedence
entryRulePrecedence returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPrecedenceRule()); }
	iv_rulePrecedence=rulePrecedence
	{ $current=$iv_rulePrecedence.current.getText(); }
	EOF;

// Rule Precedence
rulePrecedence returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='a'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getPrecedenceAccess().getAKeyword());
	}
;

// Entry rule entryRuleUntil
entryRuleUntil returns [String current=null]:
	{ newCompositeNode(grammarAccess.getUntilRule()); }
	iv_ruleUntil=ruleUntil
	{ $current=$iv_ruleUntil.current.getText(); }
	EOF;

// Rule Until
ruleUntil returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='a'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getUntilAccess().getAKeyword());
	}
;

// Entry rule entryRuleResponse
entryRuleResponse returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getResponseRule()); }
	iv_ruleResponse=ruleResponse
	{ $current=$iv_ruleResponse.current; }
	EOF;

// Rule Response
ruleResponse returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='if'
		{
			newLeafNode(otherlv_0, grammarAccess.getResponseAccess().getIfKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getResponseAccess().getPExpressionParserRuleCall_1_0());
				}
				lv_p_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getResponseRule());
					}
					set(
						$current,
						"p",
						lv_p_1_0,
						"org.xtext.stlrobust.Spec.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='then-in-response'
		{
			newLeafNode(otherlv_2, grammarAccess.getResponseAccess().getThenInResponseKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getResponseAccess().getSExpressionParserRuleCall_3_0());
				}
				lv_s_3_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getResponseRule());
					}
					set(
						$current,
						"s",
						lv_s_3_0,
						"org.xtext.stlrobust.Spec.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4='eventually holds'
			{
				newLeafNode(otherlv_4, grammarAccess.getResponseAccess().getEventuallyHoldsKeyword_4());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getResponseAccess().getTimeTimeParserRuleCall_5_0());
				}
				lv_time_5_0=ruleTime
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getResponseRule());
					}
					set(
						$current,
						"time",
						lv_time_5_0,
						"org.xtext.stlrobust.Spec.Time");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleResponseInvariance
entryRuleResponseInvariance returns [String current=null]:
	{ newCompositeNode(grammarAccess.getResponseInvarianceRule()); }
	iv_ruleResponseInvariance=ruleResponseInvariance
	{ $current=$iv_ruleResponseInvariance.current.getText(); }
	EOF;

// Rule ResponseInvariance
ruleResponseInvariance returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='a'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getResponseInvarianceAccess().getAKeyword());
	}
;

// Entry rule entryRuleNumber
entryRuleNumber returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumberRule()); }
	iv_ruleNumber=ruleNumber
	{ $current=$iv_ruleNumber.current; }
	EOF;

// Rule Number
ruleNumber returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_sign_0_0='-'
				{
					newLeafNode(lv_sign_0_0, grammarAccess.getNumberAccess().getSignHyphenMinusKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNumberRule());
					}
					setWithLastConsumed($current, "sign", lv_sign_0_0, "-");
				}
			)
		)?
		(
			(
				lv_intValue_1_0=RULE_INT
				{
					newLeafNode(lv_intValue_1_0, grammarAccess.getNumberAccess().getIntValueINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNumberRule());
					}
					setWithLastConsumed(
						$current,
						"intValue",
						lv_intValue_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		(
			otherlv_2='.'
			{
				newLeafNode(otherlv_2, grammarAccess.getNumberAccess().getFullStopKeyword_2_0());
			}
			(
				(
					lv_decimalValue_3_0=RULE_INT
					{
						newLeafNode(lv_decimalValue_3_0, grammarAccess.getNumberAccess().getDecimalValueINTTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getNumberRule());
						}
						setWithLastConsumed(
							$current,
							"decimalValue",
							lv_decimalValue_3_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getExpressionRule());
						}
					}
					otherlv_0=RULE_ID
					{
						newLeafNode(otherlv_0, grammarAccess.getExpressionAccess().getS1SignalCrossReference_0_0_0());
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getExpressionAccess().getF1NumberParserRuleCall_0_1_0());
					}
					lv_f1_1_0=ruleNumber
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpressionRule());
						}
						set(
							$current,
							"f1",
							lv_f1_1_0,
							"org.xtext.stlrobust.Spec.Number");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		(
			(
				(
					lv_operator_2_1='>'
					{
						newLeafNode(lv_operator_2_1, grammarAccess.getExpressionAccess().getOperatorGreaterThanSignKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getExpressionRule());
						}
						setWithLastConsumed($current, "operator", lv_operator_2_1, null);
					}
					    |
					lv_operator_2_2='>='
					{
						newLeafNode(lv_operator_2_2, grammarAccess.getExpressionAccess().getOperatorGreaterThanSignEqualsSignKeyword_1_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getExpressionRule());
						}
						setWithLastConsumed($current, "operator", lv_operator_2_2, null);
					}
					    |
					lv_operator_2_3='='
					{
						newLeafNode(lv_operator_2_3, grammarAccess.getExpressionAccess().getOperatorEqualsSignKeyword_1_0_2());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getExpressionRule());
						}
						setWithLastConsumed($current, "operator", lv_operator_2_3, null);
					}
					    |
					lv_operator_2_4='<'
					{
						newLeafNode(lv_operator_2_4, grammarAccess.getExpressionAccess().getOperatorLessThanSignKeyword_1_0_3());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getExpressionRule());
						}
						setWithLastConsumed($current, "operator", lv_operator_2_4, null);
					}
					    |
					lv_operator_2_5='<='
					{
						newLeafNode(lv_operator_2_5, grammarAccess.getExpressionAccess().getOperatorLessThanSignEqualsSignKeyword_1_0_4());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getExpressionRule());
						}
						setWithLastConsumed($current, "operator", lv_operator_2_5, null);
					}
				)
			)
		)
		(
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getExpressionRule());
						}
					}
					otherlv_3=RULE_ID
					{
						newLeafNode(otherlv_3, grammarAccess.getExpressionAccess().getS2SignalCrossReference_2_0_0());
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getExpressionAccess().getF2NumberParserRuleCall_2_1_0());
					}
					lv_f2_4_0=ruleNumber
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpressionRule());
						}
						set(
							$current,
							"f2",
							lv_f2_4_0,
							"org.xtext.stlrobust.Spec.Number");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleTime
entryRuleTime returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTimeRule()); }
	iv_ruleTime=ruleTime
	{ $current=$iv_ruleTime.current; }
	EOF;

// Rule Time
ruleTime returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTimeAccess().getUpperTimeBoundParserRuleCall_0());
		}
		this_UpperTimeBound_0=ruleUpperTimeBound
		{
			$current = $this_UpperTimeBound_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTimeAccess().getLowerTimeBoundParserRuleCall_1());
		}
		this_LowerTimeBound_1=ruleLowerTimeBound
		{
			$current = $this_LowerTimeBound_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTimeAccess().getIntervalParserRuleCall_2());
		}
		this_Interval_2=ruleInterval
		{
			$current = $this_Interval_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleUpperTimeBound
entryRuleUpperTimeBound returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUpperTimeBoundRule()); }
	iv_ruleUpperTimeBound=ruleUpperTimeBound
	{ $current=$iv_ruleUpperTimeBound.current; }
	EOF;

// Rule UpperTimeBound
ruleUpperTimeBound returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='within'
		{
			newLeafNode(otherlv_0, grammarAccess.getUpperTimeBoundAccess().getWithinKeyword_0());
		}
		(
			(
				lv_value_1_0=RULE_INT
				{
					newLeafNode(lv_value_1_0, grammarAccess.getUpperTimeBoundAccess().getValueINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getUpperTimeBoundRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getUpperTimeBoundAccess().getUnitTimeUnitParserRuleCall_2_0());
				}
				lv_unit_2_0=ruleTimeUnit
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUpperTimeBoundRule());
					}
					set(
						$current,
						"unit",
						lv_unit_2_0,
						"org.xtext.stlrobust.Spec.TimeUnit");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleLowerTimeBound
entryRuleLowerTimeBound returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLowerTimeBoundRule()); }
	iv_ruleLowerTimeBound=ruleLowerTimeBound
	{ $current=$iv_ruleLowerTimeBound.current; }
	EOF;

// Rule LowerTimeBound
ruleLowerTimeBound returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='after'
		{
			newLeafNode(otherlv_0, grammarAccess.getLowerTimeBoundAccess().getAfterKeyword_0());
		}
		(
			(
				lv_value_1_0=RULE_INT
				{
					newLeafNode(lv_value_1_0, grammarAccess.getLowerTimeBoundAccess().getValueINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLowerTimeBoundRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getLowerTimeBoundAccess().getUnitTimeUnitParserRuleCall_2_0());
				}
				lv_unit_2_0=ruleTimeUnit
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLowerTimeBoundRule());
					}
					set(
						$current,
						"unit",
						lv_unit_2_0,
						"org.xtext.stlrobust.Spec.TimeUnit");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleInterval
entryRuleInterval returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntervalRule()); }
	iv_ruleInterval=ruleInterval
	{ $current=$iv_ruleInterval.current; }
	EOF;

// Rule Interval
ruleInterval returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='between'
		{
			newLeafNode(otherlv_0, grammarAccess.getIntervalAccess().getBetweenKeyword_0());
		}
		(
			(
				lv_min_1_0=RULE_INT
				{
					newLeafNode(lv_min_1_0, grammarAccess.getIntervalAccess().getMinINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIntervalRule());
					}
					setWithLastConsumed(
						$current,
						"min",
						lv_min_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_2='and'
		{
			newLeafNode(otherlv_2, grammarAccess.getIntervalAccess().getAndKeyword_2());
		}
		(
			(
				lv_max_3_0=RULE_INT
				{
					newLeafNode(lv_max_3_0, grammarAccess.getIntervalAccess().getMaxINTTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIntervalRule());
					}
					setWithLastConsumed(
						$current,
						"max",
						lv_max_3_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getIntervalAccess().getUnitTimeUnitParserRuleCall_4_0());
				}
				lv_unit_4_0=ruleTimeUnit
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIntervalRule());
					}
					set(
						$current,
						"unit",
						lv_unit_4_0,
						"org.xtext.stlrobust.Spec.TimeUnit");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleTimeUnit
entryRuleTimeUnit returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTimeUnitRule()); }
	iv_ruleTimeUnit=ruleTimeUnit
	{ $current=$iv_ruleTimeUnit.current.getText(); }
	EOF;

// Rule TimeUnit
ruleTimeUnit returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='ms'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTimeUnitAccess().getMsKeyword_0());
		}
		    |
		kw='s'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTimeUnitAccess().getSKeyword_1());
		}
		    |
		kw='min'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTimeUnitAccess().getMinKeyword_2());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
